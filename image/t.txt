      py      
'1!ABS SBA!History and Introduction!ABS SBA!!ABS SBA!Python programming language was developed by <m>Guido van Rossumhttps://gvanrossum.github.io</m> in late 80\'s where its first release came in 1991. It was inspired by a "Monty Python\'s Flying Circus" published scripts, a comedy series from BBC in 1970s. Python name was "Short, unique and slightly mysterious" in terms of the inventor.\n<h>\n*The Zen of Python\n</h>\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren\'t special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you\'re Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it\'s a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let\'s do more of those!\n<h>\n*Versions of Python\n</h>\n<m>\nhttp://minhinc.42web.io/image/pythonversion_s.png\n</m>\nDifferences between Major releases Python2.x and Python3.x\n<cb>\n                      <l><m>Python2http://python.org</m></l>                             <l><m>Python3http://python.org</m></l>\n\nYear of Release       Python 2 was released in            Python 3 was released in\n                      the year 2000.                      the year 2008.\n                   \n"print" Keyword       print is considered to be a         In Python 3, print is considered\n                      statement and not a function.       to be a function and not a statement.\n\nStorage of Strings    strings are stored as ASCII         In Python 3, strings are stored as\n                      by default.                         UNICODE by default.\n                      print u\'strings are now utf-8       print(\'strings are now utf-8\n                      \\u03BCnico\\u0394é!\'                 \\u03BCnico\\u0394é!\')\n\nDivision of Integers  On the division of two integers,    On the division of two integers, we\n                      we get an integral value in         get a floating-point value in Python 3.\n                      Python 2. For instance, 7/2 yields  For instance, 7/2 yields 3.5 in Python 3.\n                      3 in Python 2.\n\nExceptions            exceptions are enclosed in          exceptions are enclosed in parentheses.\n                      notations.\n                      try:                                try:\n                       raise ValueError "This is not       raise ValueError("This is not a valid\n                        a valid value"                      value")\n                      except ValueError, Val_error:       except ValueError as val_err:\n                       print Val_error, \'write any         print(val_err, \'Write any custom message\n                        custom message within this          within this quote\')  \n                        quote\' \n\n\nVariable leakage      The values of global variables      The value of variables never changes.\n                      do change in Python 2 if they are   $ python3\n                      used inside a for-loop.              Python 3.10.6 (main, Nov 14 2022, 16:10\n                      $ python2                           :14) [GCC 11.3.0] on linux\n                      Python 2.7.18 (default, Jul  1      >>> i=10\n                       2022, 10:30:50)                    >>> [i for i in range(4)]\n                      [GCC 11.2.0] on linux2              [0, 1, 2, 3]\n                      >>> i=10                            >>> i\n                      >>> [i for i in range(4)]           10\n                      [0, 1, 2, 3]                        >>>\n                      >>> i\n                      3\n                      >>> \n\n\nIteration             the xrange() function has been      the new Range() function was introduced\n                      defined for iterations.             to perform iterations.\n\nEase of Syntax        Python 2 has more complicated       Python 3 has an easier syntax compared\n                      syntax than Python 3.               to Python 2.\n\n</cb>\nPython 2 no longer supported after 2020. Python 3 is used in a lot of fields like Software Engineering, Data Science, etc.\nChart shows the usage of Python2 and Python3 over the time.\n<m>\nhttp://minhinc.42web.io/image/python2_3usage_s.png\n</m>\n\nBelow chart shows percetange of questions asked on Python2 and Python3 over the time on StackOverflow.\n<m>\nhttp://minhinc.42web.io/image/python2_3stackoverflowquestion_s.png\n</m>\n\n<h>\n*Basic python program\n</h>\nfrom datetime import datetime as <L>dt</l>\ndef <g>main</g>():\n print(f<r>\'Today date and time</r> {dt.now()}\')\nif __name__==<r>\'__main__\'</r>:\n main()'
'2!ABS SBA!Interpreter and Python Environment!ABS SBA!!ABS SBA!<h>\n*Python Interpreter\n</h>\nPython is an interperative language. Python scripts are interpreted through python interpreter binary. On linux, path of python interpreter is /usr/bin/python<version>. For python3.8 it would be /usr/bin/python3.8\n\n<c>\nminhinc@minhinc:~/tmp$ ls -la /usr/bin | grep -i python3\nlrwxrwxrwx  1 root root          56 Jan  5 10:52 apt-changelog -> ../lib/python3/dist-packages/mintcommon/apt_changelog.py\n-rwxr-xr-x  1 root root        2336 Jun 20  2017 dh_python3-ply\nlrwxrwxrwx  1 root root          23 Jan 27 21:11 pdb3.8 -> ../lib/python3.8/pdb.py\nlrwxrwxrwx  1 root root          31 Jan  5 10:53 py3versions -> ../share/python3/py3versions.py\nlrwxrwxrwx  1 root root           9 Jan  5 10:53 python3 -> python3.8\n-rwxr-xr-x  1 root root     5486384 Jan 27 21:11 python3.8\nlrwxrwxrwx  1 root root          33 Jan 27 21:11 python3.8-config -> x86_64-linux-gnu-python3.8-config\nlrwxrwxrwx  1 root root          16 Mar 13  2020 python3-config -> python3.8-config\n-rwxr-xr-x  1 root root        3240 Jan 27 21:11 x86_64-linux-gnu-python3.8-config\nlrwxrwxrwx  1 root root          33 Mar 13  2020 x86_64-linux-gnu-python3-config -> x86_64-linux-gnu-python3.8-config\n</c>\n\n<h>\n*Interactive Mode\n</h>\nPython interpreter can run in interactive mode. It provides command prompt <c>>>></c> and <c>...</c>. <c>>>></c> prompts for python command where as three dots <c>...</c> is for multiline statements.\n\n<c>\nminhinc@minhinc:~/tmp/$ python3\nPython 3.8.5 (default, Jan 27 2021, 15:41:15) \n[GCC 9.3.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> class A:\n...  pass\n... \n>>> a=b=A()\n>>> print(a is b)\nTrue\n>>> quit()\n</c>\nWhen multiline statements are over, \'Enter\' key needs to be pressed.\n\nCommands can be entered through \'-c\' option on python interpretor. <c>python3 -c \'print(<r>"hello world"</r>)\'</c> would print <r>"hello world"</r>. Above code can be written as\n<c>\nminhinc@minhinc:~/tmp$ python3 -c "exec(\'class A:\n pass\na=b=A()\nprint(a is b)\')"\nTrue\n</c>\n\n<h>\n*Scripting mode\n</h>\nPython programs can be written in a module. Module can be called as <c>python3 -m <modulename></c>. If module name is helloworld.py then it can be called as <c>python3 -m helloworld</c>. <G>helloworld.py</g> module must be in PYTHONPATH or sys.path. \n\nmodule can also be executed as script <c>python3 <scriptname></c>. Here it would be <c>python3 helloworld.py</c>. In this case full path must be given.\n\n<c>\nminhinc@minhinc:~/tmp$ cat helloworld.py \ndef func():\n print(\'hello world\')\n\nfunc()\nminhinc@minhinc:~/tmp$ python3 -m helloworld\nhello world\nminhinc@minhinc:~/tmp$ cd ..\nminhinc@minhinc:~$ export PYTHONPATH=~/tmp:$PYTHONPATH\nminhinc@minhinc:~$ python3 -m helloworld\nhello world\nminhinc@minhinc:~$ python3 tmp/helloworld.py \nhello world\n</c>\n\nPython3 interpretor can also be invoked through argument \'-i\', interactive mode. This would execute the module or script and enter into interactive mode. More commands can be executed against the module/script afterwards.\n\n<c>\nminhinc@minhinc:~/tmp$ cat helloworld.py \ndef func():\n print(\'hello world\')\n\nfunc()\nminhinc@minhinc:~$ python3 -i tmp/helloworld.py \nhello world\n>>> func()\nhello world\nminhinc@minhinc:~/tmp$ python3 -i -m helloworld\nhello world\n>>> func()\nhello world\n>>> quit()\n</c>\n\n<h>\n*Main module\n</h>\nIn interactive mode python3 executes main module. All code written belongs to main module. Module namespace contains \'__name__\' key which has value of \'__main__\'\n\n<c>\nminhinc@minhinc:~/tmp$ python3\nPython 3.8.5 (default, Jan 27 2021, 15:41:15) \n[GCC 9.3.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> dir()\n[\'__annotations__\', \'__builtins__\', \'__doc__\', \'__loader__\', \'__name__\', \'__package__\', \'__spec__\']\n>>> __name__\n\'__main__\'\n>>> quit()\nminhinc@minhinc:~/tmp$ python3 -c \'print(__name__)\'\n__main__\nminhinc@minhinc:~/tmp$ python3 -i -c \'print(__name__)\'\n__main__\n>>> dir()\n[\'__annotations__\', \'__builtins__\', \'__doc__\', \'__loader__\', \'__name__\', \'__package__\', \'__spec__\']\n</c>\n\nModule or script that runs directly through python3 interpreter in scripting mode is main module. when interpreter runs with argument <c>-i</c> then module or script runs as main module.\n\n<c>\nminhinc@minhinc:~/tmp$ cat helloworld.py \ndef func():\n print(\'hello world\')\n\nfunc()\nprint(\'__name__ is\',__name__)\nminhinc@minhinc:~/tmp$ python3 -i -m helloworld\nhello world\n__name__ is __main__\n>>> dir()\n[\'__annotations__\', \'__builtins__\', \'__cached__\', \'__doc__\', \'__file__\', \'__loader__\', \'__name__\', \'__package__\', \'__spec__\', \'func\']\n>>> __name__\n\'__main__\'\n>>> quit()\nminhinc@minhinc:~/tmp$ python3 -i helloworld.py\nhello world\n__name__ is __main__\n>>> dir()\n[\'__annotations__\', \'__builtins__\', \'__doc__\', \'__loader__\', \'__name__\', \'__package__\', \'__spec__\', \'func\']\n>>> __name__\n\'__main__\'\n</c>\n\n<h>\n*Library modules\n</h>\npython interpreter import \'builtins\' module when \'main\' module loads.\n<c>\nfrom builtins import *\n</c>\nbuilt types are imported in this fashion,i.e exceptions, string, int, tuple, list, dict, bool,classmethod,staticmethodl etc.\n<c>\nminhinc@minhinc:~/tmp/MISC/gc$ python3\nPython 3.8.5 (default, May 27 2021, 13:30:53) \n[GCC 9.3.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> import builtins\n>>> dir(builtins)\n</c>\n<cc>\n[\'ArithmeticError\', \'AssertionError\', \'AttributeError\', \'BaseException\', \'BlockingIOError\', \'BrokenPipeError\', \'BufferError\', \'BytesWarning\', \'ChildProcessError\', \'ConnectionAbortedError\', \'ConnectionError\', \'ConnectionRefusedError\', \'ConnectionResetError\', \'DeprecationWarning\', \'EOFError\', \'Ellipsis\', \'EnvironmentError\', \'Exception\', \'False\', \'FileExistsError\', \'FileNotFoundError\', \'FloatingPointError\', \'FutureWarning\', \'GeneratorExit\', \'IOError\', \'ImportError\', \'ImportWarning\', \'IndentationError\', \'IndexError\', \'InterruptedError\', \'IsADirectoryError\', \'KeyError\', \'KeyboardInterrupt\', \'LookupError\', \'MemoryError\', \'ModuleNotFoundError\', \'NameError\', \'None\', \'NotADirectoryError\', \'NotImplemented\', \'NotImplementedError\', \'OSError\', \'OverflowError\', \'PendingDeprecationWarning\', \'PermissionError\', \'ProcessLookupError\', \'RecursionError\', \'ReferenceError\', \'ResourceWarning\', \'RuntimeError\', \'RuntimeWarning\', \'StopAsyncIteration\', \'StopIteration\', \'SyntaxError\', \'SyntaxWarning\', \'SystemError\', \'SystemExit\', \'TabError\', \'TimeoutError\', \'True\', \'TypeError\', \'UnboundLocalError\', \'UnicodeDecodeError\', \'UnicodeEncodeError\', \'UnicodeError\', \'UnicodeTranslateError\', \'UnicodeWarning\', \'UserWarning\', \'ValueError\', \'Warning\', \'ZeroDivisionError\', \'__build_class__\', \'__debug__\', \'__doc__\', \'__import__\', \'__loader__\', \'__name__\', \'__package__\', \'__spec__\', \'abs\', \'all\', \'any\', \'ascii\', \'bin\', \'bool\', \'breakpoint\', \'bytearray\', \'bytes\', \'callable\', \'chr\', \'classmethod\', \'compile\', \'complex\', \'copyright\', \'credits\', \'delattr\', \'dict\', \'dir\', \'divmod\', \'enumerate\', \'eval\', \'exec\', \'exit\', \'filter\', \'float\', \'format\', \'frozenset\', \'getattr\', \'globals\', \'hasattr\', \'hash\', \'help\', \'hex\', \'id\', \'input\', \'int\', \'isinstance\', \'issubclass\', \'iter\', \'len\', \'license\', \'list\', \'locals\', \'map\', \'max\', \'memoryview\', \'min\', \'next\', \'object\', \'oct\', \'open\', \'ord\', \'pow\', \'print\', \'property\', \'quit\', \'range\', \'repr\', \'reversed\', \'round\', \'set\', \'setattr\', \'slice\', \'sorted\', \'staticmethod\', \'str\', \'sum\', \'super\', \'tuple\', \'type\', \'vars\', \'zip\']\n</cc>\nmodule package information like package installation path are provided through __spec__ key in the namespace\n<c>\nimport PySide6\n>>> PySide6.__spec__\nModuleSpec(name=\'PySide6\', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7f3d524955b0>, origin=\'/usr/local/lib/python3.8/dist-packages/PySide6/__init__.py\', submodule_search_locations=[\'/usr/local/lib/python3.8/dist-packages/PySide6\'])\n</c>\npython interpreter provide help service where list of library modules, keywords, symbols and topics can be listed.\n<c>\nminhinc@minhinc:~/tmp/MISC/gc$ python3\nPython 3.8.5 (default, May 27 2021, 13:30:53) \n[GCC 9.3.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> help()\n\nWelcome to Python 3.8\'s help utility!\n\nIf this is your first time using Python, you should definitely check out\nthe tutorial on the Internet at https://docs.python.org/3.8/tutorial/.\n\nEnter the name of any module, keyword, or topic to get help on writing\nPython programs and using Python modules.  To quit this help utility and\nreturn to the interpreter, just type "quit".\n\nTo get a list of available modules, keywords, symbols, or topics, type\n"modules", "keywords", "symbols", or "topics".  Each module also comes\nwith a one-line summary of what it does; to list the modules whose name\nor summary contain a given string such as "spam", type "modules spam".\n\nhelp> modules\n\nPlease wait a moment while I gather a list of all available modules...\n</c>\n<cc>\nAppearance          _version            enum                pylab\nAptUrl              _warnings           errno               pylint\nAtspiStateTracker   _weakref            fasteners           pymacaroons\nAutoHide            _weakrefset         faulthandler        pyparsing\nAutoShow            _xxsubinterpreters  fcntl               pyphen\nClickSimulator      _xxtestfuzz         fetchm              pypredict\nCommandNotFound     _yaml               filecmp             pyrfc3339\nConfig              abc                 fileinput           pytz\nConfigUtils         agenda              fnmatch             queue\nCrypto              aifc                formatter           quopri\nDBusUtils           antigravity         fractions           random\nExceptions          apiclient           ftplib              re\nGlobalKeyListener   apport              functools           read\nHardwareSensorTracker apport_python_hook  gc                  readline\nIconPalette         apt                 genericpath         redshift_gtk\nIndicator           apt_clone           getconsole          reportlab\nKbdWindow           apt_inst            getcontactm         reprlib\nKeyCommon           apt_pkg             getopt              requests\nKeyGtk              aptdaemon           getpass             requests_unixsocket\nKeyboard            aptsources          gettext             resource\nKeyboardPopups      argparse            gi                  rlcompleter\nKeyboardWidget      array               glob                rsa\nLanguageSupport     ast                 google_auth_httplib2 runpy\nLayout              astroid             googleapiclient     samba\nLayoutLoaderSVG     asynchat            grp                 scanext\nLayoutView          asyncio             grpc                sched\nMySQLdb             asyncore            gzip                secrets\nNvidiaDetector      atexit              hashlib             secretstorage\nOnboard             audioop             heapq               seed\nOnboardGtk          base64              hmac                select\nOpenSSL             bdb                 hpmudext            selectors\nPAM                 binascii            html                selenium\nPIL                 binhex              html5lib            sendmailm\nPyICU               bisect              http                setproctitle\nPyQt5               blinker             httplib2            settings\nPySide6             brain_argparse      icu                 setuptools\nQuirks              brain_attrs         idna                shelve\nScanner             brain_builtin_inference ifaddr              shiboken6\nSnippetView         brain_collections   imaplib             shlex\nSound               brain_crypt         imghdr              shutil\nSpellChecker        brain_curses        imp                 signal\nTextChanges         brain_dataclasses   importlib           simplejson\nTextContext         brain_dateutil      inspect             sip\nTextDomain          brain_fstrings      io                  sipconfig\nTimer               brain_functools     ipaddr              sipconfig_nd8\nTouchHandles        brain_gi            ipaddress           site\nTouchInput          brain_hashlib       isort               sitecustomize\nUDevTracker         brain_http          itertools           six\nUbuntuDrivers       brain_io            json                smtpd\nVersion             brain_mechanize     jwt                 smtplib\nWPEngine            brain_multiprocessing kazam               sndhdr\nWindowUtils         brain_namedtuple_enum keyring             socket\nWordSuggestions     brain_nose          keyword             socketserver\nXInput              brain_numpy_core_fromnumeric kiwisolver          soupsieve\nXlib                brain_numpy_core_function_base launchpadlib        speechd\n__future__          brain_numpy_core_multiarray lazy_object_proxy   speechd_config\n_abc                brain_numpy_core_numeric ldb                 spwd\n_ast                brain_numpy_core_numerictypes lib2to3             sqlalchemy\n_asyncio            brain_numpy_core_umath linecache           sqlite3\n_bisect             brain_numpy_ndarray listwidgetm         sre_compile\n_blake2             brain_numpy_random_mtrand locale              sre_constants\n_bootlocale         brain_numpy_utils   lockfile            sre_parse\n_bz2                brain_pkg_resources logging             ssl\n_cffi_backend       brain_pytest        louis               stat\n_codecs             brain_qt            lsb_release         statistics\n_codecs_cn          brain_random        lxml                string\n_codecs_hk          brain_re            lzma                stringprep\n_codecs_iso2022     brain_six           macaroonbakery      struct\n_codecs_jp          brain_ssl           mailbox             subprocess\n_codecs_kr          brain_subprocess    mailcap             sunau\n_codecs_tw          brain_threading     mako                symbol\n_collections        brain_typing        markupsafe          symtable\n_collections_abc    brain_uuid          marshal             sys\n_compat_pickle      brlapi              math                sysconfig\n_compression        bs4                 matplotlib          syslog\n_contextvars        builtins            mccabe              systemd\n_crypt              bz2                 mimetypes           t\n_csv                cProfile            mintcommon          t1\n_ctypes             cachecontrol        mintreport          tabnanny\n_ctypes_test        cachetools          mmap                talloc\n_curses             cairo               modulefinder        tarfile\n_curses_panel       cairocffi           monotonic           tdb\n_datetime           cairosvg            mpl_toolkits        telnetlib\n_dbm                calendar            msgpack             tempfile\n_dbus_bindings      canonical_equivalents multiprocessing     termios\n_dbus_glib_bindings caribou             nacl                test\n_decimal            certifi             netifaces           textwrap\n_dummy_thread       cffi                netrc               this\n_elementtree        cgi                 nis                 threading\n_functools          cgitb               nntplib             time\n_gdbm               chainm              nose                timeit\n_hashlib            chardet             ntpath              tinycss2\n_heapq              chunk               nturl2path          tkinter\n_icu                click               numbers             token\n_imp                cmath               numpy               tokenize\n_io                 cmd                 oauth2client        toml\n_json               code                oauthlib            trace\n_ldb_text           codecs              opcode              traceback\n_locale             codeop              operator            tracemalloc\n_lsprof             collections         optparse            tt\n_lzma               colorama            orca                tty\n_markupbase         colorsys            os                  turtle\n_md5                compileall          osk                 tw\n_multibytecodec     concurrent          ossaudiodev         types\n_multiprocessing    configobj           packaging           typing\n_opcode             configparser        parser              uaclient\n_operator           contextlib          parted              ufw\n_osx_support        contextvars         pathlib             unicodedata\n_ped                copy                pcardext            unidecode\n_pickle             copyreg             pdb                 unittest\n_posixshmem         crypt               pdfkit              uno\n_posixsubprocess    cryptography        pep517              unohelper\n_py_abc             cssselect2          pexpect             uritemplate\n_pydecimal          csv                 pickle              urllib\n_pyio               ctypes              pickletools         urllib3\n_queue              cups                pip                 utils\n_random             cupsext             pipes               uu\n_sha1               cupshelpers         pkg_resources       uuid\n_sha256             curl                pkgutil             validate\n_sha3               curses              platform            venv\n_sha512             cycler              plistlib            wadllib\n_signal             databasem           ply                 warnings\n_sitebuiltins       dataclasses         poplib              wave\n_socket             datetime            posix               weakref\n_sqlite3            dateutil            posixpath           weasyprint\n_sre                dbm                 pprint              webbrowser\n_ssl                dbpushpullm         problem_report      webencodings\n_stat               dbus                profile             wheel\n_statistics         deb822              progress            widgetm\n_string             debian              pstats              wrapt\n_strptime           debian_bundle       psutil              wsgiref\n_struct             decimal             pty                 xapp\n_symtable           defer               ptyprocess          xcffib\n_sysconfigdata__linux_x86_64-linux-gnu definitions         pwd                 xdg\n_sysconfigdata__x86_64-linux-gnu defusedxml          py_compile          xdrlib\n_tdb_text           difflib             pyasn1              xkit\n_testbuffer         dis                 pyasn1_modules      xml\n_testcapi           distlib             pyatspi             xmlrpc\n_testimportmultiple distro              pyclbr              xxlimited\n_testinternalcapi   distutils           pycparser           xxsubtype\n_testmultiphase     doctest             pycurl              yaml\n_thread             dummy_threading     pydoc               zeroconf\n_threading_local    easy_install        pydoc_data          zipapp\n_tkinter            email               pyexpat             zipfile\n_tracemalloc        encodings           pygtkcompat         zipimport\n_uuid               entrypoints         pyinotify           zlib\n</cc>\n<c>\nEnter any module name to get more help.  Or, type "modules spam" to search\nfor modules whose name or summary contain the string "spam".\n\nhelp> keywords\n\nHere is a list of the Python keywords.  Enter any keyword to get more help.\n\nFalse               class               from                or\nNone                continue            global              pass\nTrue                def                 if                  raise\nand                 del                 import              return\nas                  elif                in                  try\nassert              else                is                  while\nasync               except              lambda              with\nawait               finally             nonlocal            yield\nbreak               for                 not                 \n\nhelp> symbols\n\nHere is a list of the punctuation symbols which Python assigns special meaning\nto. Enter any symbol to get more help.\n\n!=                  +                   <=                  __\n"                   +=                  <>                  `\n"""                 ,                   ==                  b"\n%                   -                   >                   b\'\n%=                  -=                  >=                  f"\n&                   .                   >>                  f\'\n&=                  ...                 >>=                 j\n\'                   /                   @                   r"\n\'\'\'                 //                  J                   r\'\n(                   //=                 [                   u"\n)                   /=                  \\                   u\'\n*                   :                   ]                   |\n**                  <                   ^                   |=\n**=                 <<                  ^=                  ~\n*=                  <<=                 _                   \n\nhelp> topics\n\nHere is a list of available topics.  Enter any topic name to get more help.\n</c>\n<cc>\nASSERTION           DELETION            LOOPING             SHIFTING\nASSIGNMENT          DICTIONARIES        MAPPINGMETHODS      SLICINGS\nATTRIBUTEMETHODS    DICTIONARYLITERALS  MAPPINGS            SPECIALATTRIBUTES\nATTRIBUTES          DYNAMICFEATURES     METHODS             SPECIALIDENTIFIERS\nAUGMENTEDASSIGNMENT ELLIPSIS            MODULES             SPECIALMETHODS\nBASICMETHODS        EXCEPTIONS          NAMESPACES          STRINGMETHODS\nBINARY              EXECUTION           NONE                STRINGS\nBITWISE             EXPRESSIONS         NUMBERMETHODS       SUBSCRIPTS\nBOOLEAN             FLOAT               NUMBERS             TRACEBACKS\nCALLABLEMETHODS     FORMATTING          OBJECTS             TRUTHVALUE\nCALLS               FRAMEOBJECTS        OPERATORS           TUPLELITERALS\nCLASSES             FRAMES              PACKAGES            TUPLES\nCODEOBJECTS         FUNCTIONS           POWER               TYPEOBJECTS\nCOMPARISON          IDENTIFIERS         PRECEDENCE          TYPES\nCOMPLEX             IMPORTING           PRIVATENAMES        UNARY\nCONDITIONAL         INTEGER             RETURNING           UNICODE\nCONTEXTMANAGERS     LISTLITERALS        SCOPING             \nCONVERSIONS         LISTS               SEQUENCEMETHODS     \nDEBUGGING           LITERALS            SEQUENCES           \n</cc>\n\n<h>\n*Various namespaces scope\n</h>\n<d> namespace\nPython runs only main script/module. All modules initialized recursively is based on modules imported in main script. One module gets initialized/loaded only once. Everything in python is object which leads to formation of namespace/dictionary. each name/variable defined, belongs to a certain namespace. it can be module, class or function namespace.\n<cb>\nfrom tkinter import Widget\ni=10\nj=10\nclass A:\n ca=20\n def func(arg1):\n  global i;\n  la=j\n  def func1(arg2):\n   nonlocal la\n   print(\'nested function,globals -> {} locals -> {}\'.format(globals(),locals()))\n  func1(40)\n  print(\'globals -> {} locals -> {}\'.format(globals(),locals()))\n</cb>\n<c>\n>>> A.func(20)  <l><--- func is name in A namespace</l>\nnested function,globals -> {\'__name__\': \'__main__\', \'__doc__\': None, \'__package__\': None, \'__loader__\': <class \'_frozen_importlib.BuiltinImporter\'>, \'__spec__\': None, \'__annotations__\': {}, \'__builtins__\': <module \'builtins\' (built-in)>, \'Widget\': <class \'tkinter.Widget\'>, \'i\': 10, \'j\': 10, \'A\': <class \'__main__.A\'>} locals -> {\'arg2\': 40, \'la\': 10}\nglobals -> {\'__name__\': \'__main__\', \'__doc__\': None, \'__package__\': None, \'__loader__\': <class \'_frozen_importlib.BuiltinImporter\'>, \'__spec__\': None, \'__annotations__\': {}, \'__builtins__\': <module \'builtins\' (built-in)>, \'Widget\': <class \'tkinter.Widget\'>, \'i\': 10, \'j\': 10, \'A\': <class \'__main__.A\'>} locals -> {\'arg1\': 20, \'func1\': <function A.func.<locals>.func1 at 0x7f114d5cb3a0>, \'la\': 10}\n>>> A.__dict__  <l><---- ca,func is name in A namespace</l>\nmappingproxy({\'__module__\': \'__main__\', \'ca\': 20, \'func\': <function A.func at 0x7f114cdeca60>, \'__dict__\': <attribute \'__dict__\' of \'A\' objects>, \'__weakref__\': <attribute \'__weakref__\' of \'A\' objects>, \'__doc__\': None})\n\n>>> A.func.__dict__  <l><--- A.func namespace is empty</l>\n{}\n>>> globals()   <l><--- Widget,i,j,A names in global namespace </l>\n{\'__name__\': \'__main__\', \'__doc__\': None, \'__package__\': None, \'__loader__\': <class \'_frozen_importlib.BuiltinImporter\'>, \'__spec__\': None, \'__annotations__\': {}, \'<r>__builtins__</r>\': <module \'builtins\' (built-in)>, \'<r>Widget</r>\': <class \'tkinter.Widget\'>, \'<r>i</r>\': 10, \'<r>j</r>\': 10, \'<r>A</r>\': <class \'__main__.A\'>}\n\n>>> globals()[\'A\'].__dict__  # <l><---- A is name in global namespace </l>\nmappingproxy({\'__module__\': \'__main__\', \'ca\': 20, \'func\': <function A.func at 0x7f114cdeca60>, \'__dict__\': <attribute \'__dict__\' of \'A\' objects>, \'__weakref__\': <attribute \'__weakref__\' of \'A\' objects>, \'__doc__\': None})\n</c>\n\n\nmodule namespace is also known as global namespace. global variable and imported modules are names in global/module namespace. \n\n<d> scope\n a variable/name is defined and bind to a namespace where as non bound variables which are non explictly scoped are indentified in a block or scope. a variable that is not bind to a namesapce is searched in a local block (if it is not explicitly namescoped by global,nonlocal) if not found then it is searched in global namespace and then in builtins namespace.\n<c>\ni=10\nj=20\nclass A:\n c=10\n def func():\n  global j #<l><-- explictly global namespace binding is mentioned</l>\n  x=10 \n  print(x,i,j,A.c) #<l><--- A.c is class namespace scoped </l>\n        ^ ^ ^ ^\n        | | | |\n        | | | +----- c is expicitly  declared bound to class A namespace\n        | | +---- j is explicitly delclared bound to global namespace\n        | +----- \'free variable\' as not found in local block/scope\n        +----- x found in local block\n</c>\n if a name not found at all then \'NameError\' is raises. if a variable is assigned in a scope inside a local scope of a function namespace and variable accessed in local scoped when variable couldnot be defined in scope inside local scope of function then UnboundLocalError (subclass of NameError) is raised.\n<c>\nminhinc@minhinc:~/tmp/MISC/ffmpeg$ python3\nPython 3.8.5 (default, May 27 2021, 13:30:53) \n[GCC 9.3.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> def func():\n...  return i\n... \n>>> func()\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "<stdin>", line 2, in func\nNameError: name \'i\' is not defined\n>>> def func(j):\n...  if j:\n...   i=10\n...  return i\n... \n>>> func(0)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "<stdin>", line 4, in func\nUnboundLocalError: local variable \'i\' referenced before assignment\n</c>\n<c>\n\n\'x\' and \'i\' name in function block/scope \'func()\' is searched in local function scope as name binding is not specified. \'j\' and A.c are namescoped so they would not be searched in function local scope. names not explicitly namescoped and not found in local block is declared \'free variables\'. here \'i\' is free name. if name is not found in local block it is then searched in global scope (not in class scope) and then in builtin module namespace.\n\n</c>\n<h>\n*Python Identifiers\n</h>\nIdentifiers are variables names, it can be class name, function name or any other variable names. It is generally in ASCII range (U+0001..U+007F). Identifiers can include uppercase lowercase letters, decimal numbers and underscrores. \n\n<c>\n      +--------- class identifier\n      |\n      v\nclass A:\n pass\na=A()\n^\n|\n+---- instance object identifier\n</c>\n\nFollowing keywords can not be used as identifiers\n<c>\n   False      await      else       import     pass\n   None       break      except     in         raise\n   True       class      finally    is         return\n   and        continue   for        lambda     try\n   as         def        from       nonlocal   while\n   assert     del        global     not        with\n   async      elif       if         or         yield\n</c>\n\nFollowing letter(s) have special meanings\n <d2> "_*" \n "_" stores the previous arithmetic calculation results when script runs in interactive mode. "_" is available in builtins module. If not in interactive mode this identifier has no special meaning. There are chances when script runs both in scripting mode and interactive mode together,i.e. debugging the script \'python3 -i <scriptname>\')\n<c>\nminhinc@minhinc:~/tmp$ python3\nPython 3.8.5 (default, May 27 2021, 13:30:53) \n[GCC 9.3.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> i=10;j=20\n>>> i*j\n200\n>>> 100+_\n300\n</c>\n <d2> "__*__"\n System-defined names and also known by \'dunder\' names. These names should be avoided and if used then should be proper documented.\n<c>\nminhinc@minhinc:~/tmp$ python3\nPython 3.8.5 (default, May 27 2021, 13:30:53) \n[GCC 9.3.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> dir()\n[\'__annotations__\', \'__builtins__\', \'__doc__\', \'__loader__\', \'__name__\', \'__package__\', \'__spec__\']\n</c>\n\n <d2> "__*"\n class private names. Compiler modifies the identifiers by prepending \'_<classname>\' tag.\n<c>\nclass A:\n __ca_=10\n def __init__(self):\n  self.__ma_=20\n  self.__ca_=40\n</c>\n<cb>\n>>> A._A__ca_\n10\n>>> a=A()\n>>> a._A__ca_\n40\n>>> a._A__ma_\n20\n</cb>\n\n<R>See also</R> <n><L><m>public private attributeshttp://minhinc.42web.io/training/py/advance-py-slides.php?chap=9#chap9_2></m></L></n>\n\n<h>\n*Lines and indentation\n</h>\nLine indentation in python is mandatory. Every statement code block must be atleast one space right to its expression.\n\n<c>\ndef func(number):\n for i in range(number):\n  if i%2 == 0:\n   print(\'i is even\')\n  else:\n   print(\'i is odd\')\n</c>\n\n<h>\n*Quotation\n</h>\nThree kind of quotation are generally in use. \n\na. single quote "\'" \nb. double quote \'"\' \nc. triple single quote \'\'\' or triple double quote """.\n\nQuotes can be prefixed with \'r\' or \'f\' or \'rf\'. \'r\' is raw string literal where as \'f\' is formatted string literal. \'rf\' is raw formatted string literal. raw string literal and formatted string literal finally generates string objects.\n<c>\nrow string literal   formatted string literal        string literal\n         |                      |                         |\n         |                      |                         |\n         v                      v                         v\n  --------------      -------------------------    ------------------\n  | Raw Filter |      |Formatted String Filter|    | String Filter  |\n  --------------      -------------------------    ------------------\n        |                              |                  |\n        |                              |                  |\n        +--------------   -------------+                  |\n                      |   |                               |\n                      v   v                               |\n                  ---------------                         |\n                  |string object| <-----------------------+\n                  ---------------\n</c>\nA string object cannot contain odd number of backslash. string literal, formattes string literal escapes backslash by adding one more backslash when backslash does not escape a backslash,newline \'n\', special chracter \'r\',\'b\'.. or quote character, while creating final string object. Raw string literal adds one more backslash to a backslash irrespective of blackslash escaping a backslash, newline character, special characters or quote character.\n<cb>\n>>>r\'\\n\'==\'\\n\'\nFalse\n>>>len(r\'\\n\')\n2\n>>>len(\'\\n\')\n1\n>>>i=40\n>>> f\'number is {i:^20} which is \\ an \\n integer\'\n\'number is          40          which is \\\\ an \\n integer\'\n>>> rf\'number is {i:^20} which is \\ an \\n integer\'\n\'number is          40          which is \\\\ an \\\\n integer\'\n>>> \n</cb>\nSo raw string literal and normal string literal creates two backslash in final string object when backslash do not follow special character.\nstrings are unicode by default where as bytes are not. raw bytes rb\'abc\' are possible but formatted bytes fb\'abc are not.\n\n<h>\n*Comments\n</h>\ncomment in python starts from letter \'#\'. any thing following \'#\' is comment when \'#\' does not appear in any string.\n<c>\nclass A: # A is subclass of object and of type \'type\'\n # def __init__ is class function with \'self\' as \n# first argument when called as method\n def __init__(self):\n  self.ma #ma is an attribute\n</c>\ntriple single quote and double quote can also be used as comment\n<c>\n\'\'\'\nclass widget subclass QWidget and creates\na window. qapplication needs to get\ninstantiated first\n\'\'\'\nclass widget(QWidget):\n def __init__(self):\n  self.__init__()\n\'\'\'\n</c>\n\n<h>\n*Multi Line statements\n</h>\n\nGenerally statements are written in single line\n<c>\na=10\nmystr="""hello\nworld"""\n</c>\nmultiline statement in one line is possible with semicolor in between\n<c>\na=10;b=\'hello\\nworld\';c=3+5j;d=dict()\n</c>\nfor complex statement is possible to put statements in a function definition.\n<c>\ndef func():\n a=10\n b="""hello\nworld"""\n c=3+5j\n d=dict()\n</c>\nMultiline statements in single line is discouraged as following statement is ambigous and invalid.\n<c>\nif test1: if test2: print(x)\n</c>\n<n>Semicolon form of multiline statement, semicolon bind more tightly than colon\n   <g>if x < y < z: print(x); print(y); print(z)</g>\nprints all or neither.</n>\nMultiline or compound statements are also possible through clause where cluase consistes of <g>header</g> and <g>suite</g>. Header like for,with,while,try,if should have colon \':\' to differentiate header to suite. Suite can be multiline statement in single line following the colon or multiple line, the line following the color line.'
'3!ABS SBA!Types!ABS SBA!!ABS SBA!<h>\n *Singleton Type\n</h>\n <g>\n *Singleton Type\n  - None\n  - NotImplemented\n  - Ellipsis\n </g>\n None, NotImplemented and Ellipsis are singleton objects and they exists a single object of their classes.\n<cb>\n>>>type(None),type(NotImplemented),type(Ellipsis)\n(<class \'NoneType\'>, <class \'NotImplementedType\'>, <class \'ellipsis\'>)\n</cb>\nTruth/Boolean value of None is False where as other two are True.\nNone is replaced in absense of a value,i.e. function returns None when return statment is absent.\nNotImplemented is returned from operator overloading like rich comparison or arithmatic operators when that particular operation is not supported, giving hint to intepreter to look for reflected operations or other fall backs.\nEllipsis is used in slice object.\n<h>\n*Number\n</h>\n <g>\n *Number\n   *Integeral\n    - integer\n    - bool\n   * Real\n    - float\n   * Complex\n    - complex\n </g>\n In Python every variable data type is an object. Number object is generated by numeric literals or returned by arithmetic operators and arithmetic built-in functions.\n <d> Integral\n   <d2> integer\n     - integer object type represent integers of unlimited range supported by the virutal memory hardware. Negative integer represented by 2\'s complement.\n   <d2> bool\n     - bool object type derives from integer object type. It has two values True and False truth values.\n <d> Real\n   <d2> float\n     - Represent machine-level double precision number. 1 bit for sign, 11 bit for exponent and 53 bit for fraction/mentissa/coefficient. Refer - <m>StackOverflowhttps://stackoverflow.com/questions/801117/</m>\n<cb>\n           S  EEEEEEEEEEE   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\nbits:     63 62         52 51                                                  0\n</cb>\n <d> Complex\n   <d2> complex\n     - complex number as pair of floating point numbers.\n<cb>\n>>> type(3j)\n<class \'complex\'>\n>>> number=4+3j\n>>> type(number)\n<class \'complex\'>\n>>> number+10\n(14+3j)\n>>>\n</cb>\nNumber is a immutable type. Objects with same value have same id(memory address), most likely. object id changes if modifications happnes and it points to memory address where new value is stored and various object with the value(new value) pointing to it.\n<cb>\n>>> class A:\n...  a=10\n... \n>>> av=10\n>>> av2=20\n>>> id(A.a),id(av),id(av2),id(20)\n(140030099358224, 140030099358224, 140030099358544, 140030099358544)\n>>> av=20\n>>> id(A.a),id(av),id(av2)\n(140030099358224, 140030099358544, 140030099358544)\n>>> \n</cb>\n<c>\n     name1        name2                name3\n    --------     --------             --------\n    | A.a  |     | av   |             | av2 |\n    --------     --------             --------\n       |             | |<<post           |\n       |             | |modification>>   |\n       +-----+-------+ +---------+       |\n             |                   |       |\n             |                   +------>|\n             v                           v\n            ------                    ------\nint object1 | 10 |        int object2 | 20 |\n            ------                    ------\n     id - 140030099358224        id- 140030099358544\n</c>\n<h>\n*Sequence\n</h>\n <g>\n *Sequence\n   * Immutable\n     - String\n     - Float\n     - Bytes\n   * Mutable\n     - List\n     - ByteArray\n  </g>\nSequence represents list of values. Sequence can be addressed through square bracket, seq[index], where index can be integer or slice object,i.e. seq[1:4]->seq[Slice(1,4)].\nSequence can be mutable and immutable.\n <d> Immutable\n   <d2> String\n     - Sequence of values where each value is string object representing one unicode code point in range 0-10ffff. ord() function gives unicode code point of on string value where as chr() does reverse. encode() provides the encoded version of string (bytes object) where as decode() does reverse.\n<cb>\n>>> mystr=\'hello world\'\n>>> ord(mystr[1])\n101\n>>> chr(ord(mystr[1]))\n\'e\'\n>>> type(chr(ord(mystr[1])))\n<class \'str\'>\n>>> mystr=\'hello world\\\\xf0\'\n>>> mystr\n\'hello worldð\'\n>>> ord(mystr[11])\n240\n>>> \n>>> mystr.encode(\'utf-8\')\nb\'hello world\\\\xc3\\\\xb0\'\n>>> mystr.encode(\'unicode_escape\')\nb\'hello world\\\\xf0\'\n>>> mystr.encode(\'latin1\')\nb\'hello world\\xf0\'\n>>> mystr.encode(\'latin1\').decode()\n>>> mystr.encode(\'latin1\').decode(\'latin1\')\n\'hello worldð\'\n</cb>\n   <d2> Tuple\n     - Tuple is list of values with possibly hetrogenous types. Tuple is created by comma \',\' between expressions where as () creates emtpy tuple and (20,) creates singleton tuple. Non empty and non singleton tuple does not need braces and it is only required in case of clearing ambiguity.i.e func(2,3) is function call with two argumets where as func((2,3) is single argument of tuple type.\n<cb>\n>>> i,count=tuple(enumerate(\'hello\'))[0]\n>>> i\n0\n>>> count\n\'h\'\n>>> count,i=tuple(enumerate(\'hello\'))[0]\n>>> count,i\n(0, \'h\')\n>>> for count,i in enumerate(\'hello\'):\n...  print(count,i)\n... \n0 h\n1 e\n2 l\n3 l\n4 o\n>>> \n</cb>\n   <d2> Bytes\n     - Bytes is ascii character bytes array where ascii value of characters, in range 0-255, are strored in a sequence. decode() converts bytes object to string object where decoding type modies ascii byte count to unicode code point. ascii value 128 or more must be expressed with escapes.\n<cb>\n>>> \'hello world ð\'.encode(\'latin1\')\nb\'hello world \\\\xf0\'\n>>>\n</cb>\n <d> Mutable\n   <d2> List\n     - The items of a list are arbitrary Python objects.  Lists are formed by placing a comma-separated list of expressions in square brackets. \n    <n>No special cases needed to form lists of length 0 or 1</n>\n   <d2> ByteArray\n     - Created by constructor bytearray(). Provides same interface as bytes class.\n<h>\n*Set and Mapping\n</h>\n <g>*Set</g>\nUnordered finite sets of unique, immutable objects. It does not support subscription but supports iteration. It supports mathematical operations such as intersection, union, difference and symmetric difference.\n <d>Sets\n   <d2>Sets\n     set() constructor construct mutable set with add() method to add new items.\n   <d2>Frozen Sets\n     frozenset() constructor construct immutable set.\n\n <g>*Mapping</g>\nMapping of key,item pair where key is immutable.\n <d>Map\n   <d2>Dictionary\n    dict() constructor constructs creates dictionary.\n<c>\n   <l>class dict(**kwargs)\n   class dict(mapping, **kwargs)\n   class dict(iterable, **kwargs)</l>\n</c>\n#1 creates dictionary object with keywords. <c>dict(a=10,b=20,c=\'hello world\')</c>\n#2 creates dictionary object copying another dictionary object. keyword argument extends the dictionary object replacing already existing key. <c>dict(dict(a=10,b=20,c=\'hello world\'),c=\'welcome\',d=\'beautiful world\')</c>\n#3 creates dictionary object copying another iteratable with each element an iterator of size two and extending dictionary object with keyword argument replacing already existing key. <c>dict(((\'a\',10),(\'b\',20),(\'c\',\'hello world\')),d=\'beautiful world\')</c>\n\nDictionary can be created through dictionary display/literal \'{}\'. {\'a\':10,\'b\':20,\'c\':\'hello world\'}\n<h>\n*Callable Types\n</h>\n<g>*Callable Types\n  * User-defined functions\n  * Instance Methods\n  * Generator functions\n  * Coroutine functions\n  * Asynchronous Generator functions\n  * Built-in functions\n  * Built-in methods\n  * Classes\n  * Class Instances</g>\nCallable types provides function call type of functionality. Callable type object must have __call__ method to support this functionality.\n <d>Callable Types\n   <d2>User-defined functions\n     - User defined functions creates function object which has __call__ method and so user defined function always callable.\n<cb>\n>>> def func():\n...  print(\'hello\')\n... \n>>> type(func)\n<class \'function\'>\n>>> dir(func)\n[\'__annotations__\', \'__builtins__\', <G>\'__call__\'</G>, \'__class__\', \'__closure__\', \'__code__\', \'__defaults__\', \'__delattr__\', \'__dict__\', \'__dir__\', \'__doc__\', \'__eq__\', \'__format__\', \'__ge__\', \'__get__\', \'__getattribute__\', \'__globals__\', \'__gt__\', \'__hash__\', \'__init__\', \'__init_subclass__\', \'__kwdefaults__\', \'__le__\', \'__lt__\', \'__module__\', \'__name__\', \'__ne__\', \'__new__\', \'__qualname__\', \'__reduce__\', \'__reduce_ex__\', \'__repr__\', \'__setattr__\', \'__sizeof__\', \'__str__\', \'__subclasshook__\']\n</cb>\n   <d2>Instance methods\n     - An instance method is an object which is wrapper over class object or class instance object and user defined function.\n<c>\n     ------------ __self__        --------------------\n     | Instance |---------------->| class A          |\n     | Method   |---------+       --------------------\n     |          |__func__ |       |@classmethod      |\n     ------------         +------>|def func(self):   |\n                                  | pass      ^      |\n                                  |           |      |\n                                  |           +------|-------- class object\n                                  --------------------\n\n     ------------  __self__  ------------                ------------------\n     | Instance |----+------>| Class    |--------------->| class A        |\n     | Method   | __func__   | Instance |                |-----------------\n     |          |----+       ------------         +----->|def func(self): |\n     ------------    |                            |      | pass      ^    |\n                     +----------------------------+      |           |    |\n                                                         |           +----|------ class\n                                                         ------------------ instance object\n</c>\nfunction object receives argument one more than passed to Instance method call.\n   <d2>Generator functions\n     - Generator function uses "yield" to provide intermediate value. Generator function when called return an "iterator" object to iterate function object by calling "iterator.__next__()" where function object provides value through "yield" and break the iteration (raise StopIteration) through "return".\n<cb>\n>>> def func(start,stop):\n...  for i in range(start,stop):\n...   yield i*i\n... \n>>> type(func)\n<class \'function\'>\n>>> type(func(2,10))\n<class \'generator\'>\n>>> for i in func(2,7):\n...  print(i)\n... \n4\n9\n16\n25\n36\n>>> func(2,10).__next__()\n4\n>>> func(2,10).__next__()\n4\n>>> generator=func(2,7)\n>>> generator.__next__()\n4\n>>> generator.__next__()\n9\n>>> next(generator)\n16\n</cb>\nGenerator object itself is an iterator object whereas vice versa is not true. A generator object can be created through generator expression.\n<cb>\n>>> generator=(i*i for i in range(2,7))\n>>> type(generator)\n<class \'generator\'>\n>>> for i in generator:\n...  print(i)\n... \n4\n9\n16\n25\n36\n>>> \n</cb>\nA generator object functionality can be achieved through iterator object.\n<c>\n<<t1.py>>\nclass Squares(object):\n    def __init__(self, start, stop):\n       self.start = start\n       self.stop = stop\n\n    def __iter__(self): \n        return self\n\n    def __next__(self): # next in Python 2\n       if self.start >= self.stop:\n           raise StopIteration\n       current = self.start * self.start\n       self.start += 1\n       return current\n</c>\n<cb>\nminhinc@minhinc:~/tmp/MISC/gc$ python3 -i t1.py\n>>> iterator=Squares(2,7)\n>>> for i in iterator:\n...  print(i)\n... \n4\n9\n16\n25\n36\n>>> \n</cb>\nRefer <m>Stackoverflowhttps://stackoverflow.com/questions/2776829</m>\n   <d2>Coroutine Function\n     - function defintion with \'async def\' signature is coroutine function. It may use <g>await()</g> <g>async for</g> <g>async with</g> statements.\n   <d2>Asynchronous function generator\n     - Similar to generator function but function signature is \'async def\'. It returns \'aiterator\' and calling \'aiterator.__anext__()\'return an "awaitable" which awaits till function executes "yield". Async function object when fall of the end of iteration or return it raise StopAsyncIteration.\n   <d2>Built-in functions\n     - Function object generated through \'C\' functions.\n<cb>\n>>> import math\n>>> math.sqrt(25)\n5.0\n>>> math.sqrt.__module__\n\'math\'\n>>> math.sqrt.__self__\n<module \'math\' (built-in)>\n>>> type(math)\n<class \'module\'>\n>>> type(math.sqrt)\n<class \'builtin_function_or_method\'>\n</cb>\n   <d2>Built-in methods\n     Builtin methods of built classes. So it has __self__ attribute which is the built in object for this built in methods. Built in object is passed as the first argument to the method as "self".\n<cb>\n>>> abc=[1,2]\n>>> abc.append(3)\n>>> abc\n[1, 2, 3]\n>>> abc.append.__module__\n>>> abc.append.__self__\n[1, 2, 3]\n>>> id(abc)\n140154359452160\n>>> id(abc.append.__self__)\n140154359452160\n>>> type(abc)\n<class \'list\'>\n>>> type(abc.append)\n<class \'builtin_function_or_method\'>\n>>> \n</cb>\n   <d2>Classes\n     - Classes are callable with __call__ method in its Meta class. It calls class __new__ and __init__ methods to creates an instance of itself.\n<c>\n<<t1.py>>\nclass Meta(type):\n def __call__(self,*arg,**kwarg):\n  print(f\'Meta __call__ {self=} {arg=} {kwarg=}\')\n  return super(Meta,self).__call__(*arg,**kwarg)\n\nclass A(metaclass=Meta):\n def __new__(self,*arg,**kwarg):\n  print(f\'A __new__ {self=} {arg=} {kwarg=}\')\n  return super(A,A).__new__(self)\n def __init__(self,*arg,**kwarg):\n  print(f\'A __init__ {self=} {arg=} {kwarg=}\')\n  super(A,self).__init__()\n</c>\n<cb>\nminhinc@minhinc:~/tmp/MISC/gc$ python3 -i t1.py \n>>> a=A(2,3)\nMeta __call__ self=<class \'__main__.A\'> arg=(2, 3) kwarg={}\nA __new__ self=<class \'__main__.A\'> arg=(2, 3) kwarg={}\nA __init__ self=<__main__.A object at 0x7f3f6e7e6a10> arg=(2, 3) kwarg={}\n>>> \n</cb>\nRefer : http://minhinc.42web.io/training/py/advance-py-slides.php?chap7\n   <d2>Class Instance\n     - Class instance can be callable when __call__ function is defined as Class attribute.\n<cb>\n>>> class A:\n...  def __call__(self,*arg,**kwarg):\n...   print(f\'A.__call__ {self=} {arg=} {kwarg}\')\n... \n>>> a=A()\n>>> a(4,5,\'hello world\')\nA.__call__ self=<__main__.A object at 0x7f4e6b9f1180> arg=(4, 5, \'hello world\') {}\n>>> \n</cb>\n<h>\n*Modules, Custom class, Class instance\n</h>\n <d>Modules\n   - A python ".py" file becomes a module object when it is loaded into the interpreter with "import" statement. Runtime loading is possible with function "__import__()". importlib.import_module() also provide runtime module loading and module object creation.\nRefer <m>Modulehttp://minhinc.42web.io/training/py/advance-py-slides.php?chap5</m>\n\n <d> Custom class\n   -- Custom class type can be created though \'type()\' builtin operator or by defining class in python module file.\nRefer <m>Classhttp://minhinc.42web.io/training/py/advance-py-slides.php?chap4</m>\n\n <d> Class Instance\n   - Class instance object is created by calling Class object. Class instance object has separate namespace __dict__ which contains class instance attributes. When calling class object user defined function through class instance object, new instance method object is created refering to class instance object and class object user defined ofunction object with __self__ and __func__ attributes.\nRefer <m>Class Instancehttp://minhinc.42web.io/training/py/advance-py-slides.php?chap4</m>\n<h>\n*I/O Object\n</h>\n I/O object represent open file in OS file system. sys.stdin, sys.stdout, sys.stderr are I/O object representing standard input,output and error files. open(), os.fdopen(), os.popen() and makfile() generally used to create file objects.\n<h>\n*Code Object, Frame Object, Traceback Object\n</h>\n<h>\n*slice object, staticmethod object, classmethod object\n</h>'
'4!ABS SBA!SPECIAL METHODS!ABS SBA!!ABS SBA!'
'5!ABS SBA!Control statement!ABS SBA!!ABS SBA!<h>\n*if else elif statement\n</h>\n<h>\n*for in statement\n</h>\n<h>\n*while statement\n</h>\n<h>\n*break, continue and pass\n</h>\n<h>\n*Iterator\n</h>\n<h>\n*Generator\n</h>'
'6!ABS SBA!Defining and Calling functions!ABS SBA!<hr>\n*Write sample application with a function\ndefined.\n</hr>\n<ho>\n*Pass arguments as\n -Keyword arguments\n -Default arguments\n -Variable length arguments\n</ho>!ABS SBA!<h>\n*Function definition\n</h>\n<h>\n*Function arguments\n -Pass by reference and value\n -Required arguments\n -Keyword arguments\n -Default arguments\n -Variable length arguments\n</h>\n<h>\n*Function local, non local and global\nvariable.\n</h>\n<h>\n*Function object\n*Method object\n</h>\n<h>\n*runtime function object creation\n</h>\nA function object can be defined with keyword <g>def</g>. a function object can be defined global to module or inside a class. function object defined inside a function object is its local variable rather than its attribute. function object can be defined inside a class, then it becomes class attribute.\na function object can be created at runtime by following measures\na)<G>exec()</g> functions\n<c>\n>>> exec("def func2(x):\n print(\'x\',x)\n")\n>>> func2(10)\nx 10\n</c>\nb) lambda function\n<c>\na=lambda x:x+1\n>>> a(2)\n3\n</c>\nc)factory method\n<c>\ndef get_a_function(*a,**kw):\n def func_t(*a,**kw):\n  pass\n return func_t\nfunc=get_a_function()\nfunc2=get_a_function(20,30)\n</c>\n\nd)class with function operator overloaded\n<c>\nclass A:\n def __init__(self,a,b):\n  self.a,self.b=a,b\n def f(self,x):\n  return (x*self.a+self.b)\na=A(4,5)\na(6)\n</c>\n\n<h>\n*decorator\n</h>\ndecorator is structural design pattern in 23 design patterns from GoF. decorator class comes as wrapper class of decoratee and adds extra functionality\n<r>See also</r> <n><m>href="http://minhinc.42web.io/training/dp/advance-dp-slides.php?chap=5#chap5_2"decorator design pattern</m></n>\nin python a decoratee class function can be decorated by placing \'@<classname|function>\' before the function delclaration.\'@<classname|function>\' is decorator wrapper which returns actual decorator function. \'@<classname|function>\' is intialized once class object is created.\n<r>See Also</r> <n><m>href="http://minhinc.42web.io/training/py/advance-py-slides.php?chap=11#chap11_1"Meta Class Object</m></n>\n<c>\ndef decoratorfunc(f):\n print(\'decorator wrapper\')\n def func():\n  print(\'><decorator func\')\n  f()\n  print(\'<>decorator func\')\n return func\n\nclass A:\n @decoratorfunc\n def func():\n  print(\'decoratee func\')\n\n\ndecorator wrapper\n>>> A.func()\n><decorator func\ndecoratee func\n<>decorator func\n>>> A.func()\n><decorator func\ndecoratee func\n<>decorator func\nhere A.func is decoratee where as func as local to decoratorfunc is decorator, decoratorfunc is wrapper and gets intialized at the time of class object creation.\n <d2> class decorator is actually function call operator. so it also a function decorator wrapper'
'7!ABS SBA!Module and Package!ABS SBA!<ho>\n*List module namespace dictionary\n</ho>\n<ho>\n*Import a module in main module and call\nmodule functions\n</ho>\n<ho>\n*Import external modules symbols in\ncurrent module namespace\n</ho>\n<ho>\n*Reload a module\n</ho>\n<hr>\n*Write package and sub packages\n</hr>!ABS SBA!<h>\n*Package and Module\n*Importing namespace to other\n*Loading a module and accessing symbols\n</h>\nA module is the biggest namespace which contains other namespace like class and function. A module can not contain another module. A package contain modules. A package can contain other packages and modules. Package provide separate namespace similar to module, where code blocks can be written in __init__.py file making a code block belong to package namespace. In file system, module is a file where as package is a directory. Package hierarchy is referenced through dot operator. Since module can not contain another module, module is a leaf node in package heirarchy. Referring to subpackages and modules through a package does not need presence of any __init__.py in package directory.\n<c>\npackageA-----\n            |---- packageB\n            |---- packageC-------|\n            |---- moduleA        |------ packageD\n            |                    |------ moduleB\n         __init__.py             |\n                              __init__.py\n</c>\nmoduleB can be referenced as packageA.packageC.moduleB . when a codeblock that is in package.__int__.py or in a module is rerenced in __main__ module or in a particlar module then the referenced codeblock must be visible to the referencing codeblock.\n\n<c>\nimport packageA\n</c>\n\n\'import packageA\' would make its __init__.py visible to the referencing module. if packageA.__init__.py imports moduleA then only moduleA is visible to refrencing module.\n\n<c>\nminhinc@minhinc:~/tmp$ cat packageA/__init__.py \nclass A:\n ca=10\nminhinc@minhinc:~/tmp$ cat packageA/moduleA.py \nclass A:\n ca=20\nminhinc@minhinc:~/tmp$ python3\nPython 3.8.5 (default, May 27 2021, 13:30:53) \n[GCC 9.3.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> import packageA\n>>> packageA.A.ca\n10\n>>> packageA.moduleA.A.ca\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nAttributeError: module \'packageA\' has no attribute \'moduleA\'\n</c>\n\nSo moduleA is not visible to __main__ module when only packageA is imported. two solutions to it\n\n <d2> moduleA would be imported directly into main module making moduleA bind to __main__ module namespace\n<cb>\nminhinc@minhinc:~/tmp$ python3\nPython 3.8.5 (default, May 27 2021, 13:30:53) \n[GCC 9.3.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> from packageA import moduleA  <l><--- moduleA is bind to __main__ module namespace</l>\n>>> packageA.moduleA.A.ca      <l><--- packageA.moduleA is not bind to __main__ module namespace</l>\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nNameError: name \'packageA\' is not defined\n>>> moduleA.A.ca\n20\n>>> import packageA.moduleA  <l><--- packageA.moduleA is bind to __main__ module namespace</l>\n>>> packageA.moduleA.A.ca\n20\n>>> packageA.A.ca\n10\n</cb>\n\n <d2> moduleA would be imported to packageA\n<c>\nminhinc@minhinc:~/tmp$ cat packageA/__init__.py \nimport packageA.moduleA   <l><--- moduleA is imported to packageA namdespace</l>\nclass A:\n ca=10\nminhinc@minhinc:~/tmp$ python3\nPython 3.8.5 (default, May 27 2021, 13:30:53) \n[GCC 9.3.0] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> import packageA\n>>> packageA.moduleA.A.ca\n20\n</c>\n\n<h>\n*Locating module\n</h>\nPython module when imported must be visible to the importing module. modules is searched in sys.path.\n<cb>\nminhinc@minhinc:~/tmp$ python3 -c \'import sys;print(sys.path)\'\n[\'\', \'/usr/lib/python38.zip\', \'/usr/lib/python3.8\', \'/usr/lib/python3.8/lib-dynload\', \'/home/minhinc/.local/lib/python3.8/site-packages\', \'/usr/local/lib/python3.8/dist-packages\', \'/usr/lib/python3/dist-packages\', \'/usr/lib/python3.8/dist-packages\']\nminhinc@minhinc:~/tmp$ export PYTHONPATH=/home/minhinc/tmp/MISC:$PYTHONPATH\nminhinc@minhinc:~/tmp$ python3 -c \'import sys;print(sys.path)\'\n[\'\', \'/home/minhinc/tmp/MISC\', \'/home/minhinc/tmp/MISC/gc\', \'/usr/lib/python38.zip\', \'/usr/lib/python3.8\', \'/usr/lib/python3.8/lib-dynload\', \'/home/minhinc/.local/lib/python3.8/site-packages\', \'/usr/local/lib/python3.8/dist-packages\', \'/usr/lib/python3/dist-packages\', \'/usr/lib/python3.8/dist-packages\']\n</cb>\n\nPython modules or packages are searched in current directory and in other directories mentioned in sys.path. Module searching path list can be appended by adding path to sys.path list or adding to PYTHONPATH environment variable.\n\n<h>\n*Namespaces in dictionary\n</h>\n<h>\n*dir function listing dictionary\n</h>\n<h>\n*globals(), locals() function\n</h>\n<h>\n*Reloading a module\n</h>\n<h>\n*Python Interpreter\n</h>'
'8!ABS SBA!Class and Object!ABS SBA!<hr>\n*Write a small class with class variable and\n</hr>\n<ho>\n*function object\n</ho>\n<ho>\n*Add object variable and method objects.\n</ho>\n<ho>\n*Call methods from other method\n</ho>\n<ho>\n*Inherit from the class and override\n</ho>!ABS SBA!<h>\n*class\n*class object\n*function object\n</h>\n<a>\n<b>Abstract:</b>Class is a template or a Pattern which is used to create similar type class instances/values\n</a>\nClass is a template or a pattern that can be used to create many instances of it. In programming terms it is a user defined <i>type</i> for many value/instance objects.\nClass definition leads to creation of class namespace which is represented by data structure <i>class object</i>. Class namespace contains attributes. Attributes can be data type or function objects. Since every value has a type, a class object is of type <i>type</i> class. <G>type</G> is also known as meta class.\n<c>                            \n         <g>class</g> A:   <----- class definition\n          ca=<r>10</r>\n          <g>def</g> cfunc(self):\n           pass\n     \n            |               type <g>type</g> meta class\n            |               ^ \n            | class object /\n            v             /\n     -------------------  |     +------  A <g>namespace</g>\n     | <g>class</g> object \'A\'|---     |\n     -------------------        V\n+----->| ca       |             A.ca=10\n| +--->| cfunc()  |             A.cfunc\n| |    ------------\n| |\n| <g>attribute, function object</g>\n<g>attribute, data type</g>\n</c>\namong attributes <i>A.ca</i> is an int object whereas <i>A.cfunc</i> is function object.\n<cb>\n>>> A\n<class \'__main__.A\'>\n>>> A.cfunc\n<function A.cfunc at 0x7f9600a27dc0>\n>>> type(A)\n<class \'type\'>\n>>> type(A.cfunc)\n<class \'function\'>\n</cb>\nA class object and function object can have attributes added at run time.\n <d2> Through <i>dot</i> operator\n  A.cb=\'hello world\'\n  A.cfunc.fa=40\n <d2> Through <i>setattr</i> inbuilt function\n  setattr(A,\'cb\',\'the earth\')\n  setattr(A.cfunc,\'fa\',40)\nIt can be accessed through\n <d2> <G>dot</G> operator\n  print(A.cfunc.fa)\n <d2> <G>getattr</g> inbuilt function\n  print(getattr(A.cfunc,\'fa\')\nAttributes in a class object can be queried through inbuilt function <i>hasattr</i>\n<cb>\n>>> A.cfunc.fa=40\n>>> <g>setattr</g>(A.cfunc,\'fa\',60)\n>>> A.cfunc.fa\n60\n>>> <g>getattr</g>(A.cfunc,\'fa\')\n60\n>>> <g>hasattr</g>(A.cfunc,\'fa\')\nTrue\n</cb>\n<h>\n*class instance object\n*method object\n</h>\nA class object can be instatiated to numbers of <i>empty instances</i>. Emtpy instances has no attribute(s). Instance data structure are also known as <i>class instance objects</i>. <G>class instance objects</G> are replica of <G>class objects</G> in a sense that all attributes in <G>class object</g> can be accessed through <G>instance object</G> with same name, through internal reference.\n<c>\n            ------------------                 ------------\n            |<g>class</g> A:        |  1           *  | <g>class</g>    |\n            | ca=10          | --------------> | <g>instance</g> |<------\n            | def cfunc(self):|   A()  +------ | <g>object</g>   |      |\n  type      |  pass          |        |        ------------      |\n    ^       ------------------        |       a.ca| |a.cfunc()   |\n    |           |                     |           | |            |\n    |           |                     |           | |            |\n    +---+  |    |         +-----------+           | |            |\n<<type>>|  |    | A       |  <<type>>             | |            /\n        |  |    |         |                       | |           /\n        |  |    v         v                       | |          /\n       -------------------                        | |     empty object at\n       | class object \'A\'|                        | |     the time of \n       -------------------                        / |     creation\n ----->| A.ca=10         | <---------------------+ /\n |+--->| A.cfunc()       | <---------------------+\n ||    -------------------\n ||\n |class function object\n class attributes\n</c>\nClass object attributes can be overriden in class instance object. Calls to class function object called through class instance object pointer first creates an abstract method object which then calls class function object.\nMethod object is created after binding instance object (pointer) with class function object (pointer). So a method object has two attributes, instance object and class function object. Argument list is modified and instance object (pointer) is add at the begining, making a change in argument list. So class function objects when called through instance object must contain one argument which will finally carry instance object reference.\n\nInstance object is created through function operator called \'(\') on class object.\n<c>\na=A()\n</c>\nInstance object \'a\' is empty at the time of creation. Attributes can be added at run time.\n<cb>\n>>> class A:\n...  ca=10\n...  def cfunc():\n...   pass\n... \n>>> a=A()\n>>> a\n<__main__.A object at 0x7f1409029880>\n>>> A\n<class \'__main__.A\'>\n>>> A.__dict__\nmappingproxy({\'__module__\': \'__main__\', \'ca\': 10, \'cfunc\': <function A.cfunc at 0x7f1408f9f430>, \'__dict__\': <attribute \'__dict__\' of \'A\' objects>, \'__weakref__\': <attribute \'__weakref__\' of \'A\' objects>, \'__doc__\': None})\n>>> a.__dict__   <l><-- empty objects</l>\n{}\n>>> a.ma=<r>100</r>  <l><-- attributes added at run time</l>\n</cb>\nFunction object called through instance object leads to creation of intermeditiary method object and it does not refer to class function object directly.\n<c>\n     ------------\n     |  class A |                         instance object\n     |----------|                         -------------\n+--->|ca=10     | <-----------            |   a=A()   | <-- empty objects\n| +->|cfunc()   | <----+     |            -------------\n| |  ------------      |     -------------| a.ca      |\n| |                   -------------   ----| a.cfunc() |\n| |                   | a,A.cfunc |<--|   -------------\n| |                   -------------\n| |                  bound method object\n| |\n| |              bound method object    instance object\n| |  A.cfunc(b)   -------------         -------------\n| +---------------| b,A.cfunc |<-----+  |   b=A()   | <-- empty objects\n|                 -------------      |  -------------\n+--------------------------------+   |  | b.ca      |---+\n                                 |   +--| b.cfunc() |   |\n                                 |      -------------   |\n                                 +----------------------+\n</c>\n<cb>\n>>> hex(id(a))\n\'0x7fa8035d4880\'\n>>> hex(id(A))\n\'0xd890e0\'\n>>> A.cfunc\n<function A.cfunc at 0x7fa803549430>\n>>> a.cfunc\n<bound method A.cfunc of <__main__.A object at 0x7fa8035d4880>> <l><--- method object </l>\n>>> A.cfunc.fa=\'hello\'\n>>> a.cfunc.ma=\'hello\'       <l><-------- can not add attribute</l>\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nAttributeError: \'method\' object has no attribute \'ma\'\n>>> dir(a.cfunc)\n[\'__call__\', \'__class__\', \'__delattr__\', \'__dir__\', \'__doc__\', \'__eq__\', \'__format__\', \'<r>__func__</r>\', \'__ge__\', \'__get__\', \'__getattribute__\', \'__gt__\', \'__hash__\', \'__init__\', \'__init_subclass__\', \'__le__\', \'__lt__\', \'__ne__\', \'__new__\', \'__reduce__\', \'__reduce_ex__\', \'__repr__\', \'<r>__self__</r>\', \'__setattr__\', \'__sizeof__\', \'__str__\', \'__subclasshook__\', \'fa\']\n>>> a.cfunc.__self__   <l><---- refer to instance object</l>\n<__main__.A object at 0x7fa8035d4880>\n>>> a.cfunc.__func__          <l><---- refer to class function object </l>\n<function A.cfunc at 0x7fa803549430>\n>>> A.cfunc()\n>>> a.cfunc()   <l><--- A.cfunc() must have one argument</l>\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nTypeError: afunc() takes 0 positional arguments but 1 was given\n</cb>\nSince bound method object passes extra instance object as first parameter to the class function object, here in this case it pops error\n<cb>\nA.cfunc(A()) is similar to A().cfunc()\n</cb>\n\n<n><d> Class object, class function object and class instance object\nAmong user defined functions <G>class object</G>, <G>class function object</g> and <G>class instance object</g> <i>first class objects</i>. Being first class object they can be created at run time, passed as an argument to function and returned from the function definition, can be assigned to variable and can be stored in a list.</n>\n\n<h>\n*public private variable\n*virtual methods\n</h>\nAll attributes in class are public. Inheritance is public. all methods are virtual. Class attributes or class instance attributes with atleast two leading underscores and atmost one trailing underscores are prepended (name mangling) with _<classname> when code is complied by python.\n\n<c>\nclass B:\n def Upper(self):\n  print(\'B.Upper\')\n# __Upper=Upper\n def __init__(self):\n  B.__Upper=B.Upper\n  self.__Upper()\n\nclass A(B):\n def Upper(self):\n  print(\'A.upper\')\n</c>\n\ncompiled into\n\n<c>\nclass B:\n def Upper():\n  print(\'B.Upper\')\n# _B__Upper=Upper\n def __init__(self):\n  B._B__Upper=B.Upper\n  self._B__Upper()\n\nclass A(B):\n def Upper(self):\n  print(\'A.upper\')\n</c>\n\n<cb>\n>>> a=A()\nB.Upper\n</cb>\n\n\'a\'._B__Upper is search first then A.__B__Upper. not finding A._B__Upper it searches as B._B_Upper which is shunted as B.Upper.\n\nclass A function can be called in two cases\n - <c>B.__Upper=B.Upper</c> should be replace with <c>self.__Upper=self.Upper</c> which would be changed to <c>self._B__Upper=self.Upper</c>\n - <c>A._B__Upper</c> function introduced in class A'
"9!ABS SBA!Inheritance and Polymorphism!ABS SBA!<hr>\n*Inherit from the class and override\nmethods\n</hr>\n<ho>\n*Instantiate base and derived class\nseparately and check inheritance and\npolymorphism functionality.\n</ho>!ABS SBA!<h>\n* Inheritance\n</h>\nA class is defined to provide service in a particular technical area. A class can extend/add to functionality provided through other class, by inheriting the class, avoiding chance of code duplicacy. This promotes code reusablility.\n<h>\n - Reusing functionality through inheritance\n</h>\nInheritance promotes code reusablility. Link layer in network stack provide same interface to all kind of data transfer. Ip layer where each interface is identified thorugh ip address. Tcp and udp are different algorithms to maintain timer and send/recieve buffer. It make sense to dedicate separate class at each layer.\n<c>\n                      ----------\n                      | link   |\n                      --------------\n                      |send(dest,buffer)|\n                      --------------\n                           / \\\n                            -\n                            |\n                       --------\n                       | ip   |\n                       --------------\n                       |send(dest,buffer)|\n                       --------------\n                            / \\\n                             -\n                             |\n                     +-----------------+\n                     |                 |\n               --------            ---------\n               | tcp  |            | udp   |\n               -----------------   ----------------\n               | send(dest,buf)|   |send(dest,buf)|\n               -----------------   ----------------\n</c>\nWhat if a new ip layer alogorithms introduced which uses same link layer algorithms, what about new protocol in addition to tcp and udp.\n\nA new 'ipsec' algorithms introduced for security feature which may not use current 'ip' class\n<c>\n                      ----------\n                      | link   |\n                      --------------\n                      |send(buffer)|\n                      --------------\n                           / \\  / \\\n                            -     -\n                            |     |\n                            |     +---------|\n                       --------          ----------\n                       | ip   |          | ipsec |    <l><-- independent ipsec class</l>\n                       --------------    --------------\n                       |send(buffer)|    |send(buffer)|\n                       --------------    --------------\n</c>\n'ipsec' algorithms extending current ip class\n<c>\n                      ----------\n                      | link   |\n                      --------------\n                      |send(buffer)|\n                      --------------\n                           / \\\n                            -\n                            |\n                       --------\n                       | ip   |\n                       --------------\n                       |send(buffer)|\n                       --------------\n                            / \\\n                             -\n                             |\n                         --------\n                         | ipsec|           <l><--- adding functinality to 'ip'</l>\n                         --------------\n                         |send(buffer)|\n                         --------------\n</c>\n<d1> Features provided by inhertiance\n <d2> Distrubute responsibilities in separate reusable componenents\n <d2> Extend feature of base class.add more features in derive class\n\n<h>\n*class object inheritance\n*instance object inheritance\n</h>\n<d> Class object inheritance\nEach class carry a separate data structure (class object). When attribures cannot be searched in a class it is searched in immediate class.\n<cb>\nclass B:\n def func():\n  print('B.func()')\nclass A(B):\n ca=10\n>>>A.func()\nB.func()\n</cb>\nWith class 'A' derived from class 'B' two data strucutres comes into picture. Search begins upward when attributes not found in a data structure.\n<cb>\n                         +--------- class object B data structure\n                         |\n                         v\n                     -----------\n                     |B.func() |\n                     -----------\n                            ^\nclass object A              |     \ndata structure              +----+ searchs upward\n                                |\n                                | \n                    ----------- +\n            -------> |   ca    | <---------- A.func() \n                     -----------\n</cb>\n<d> Class instance object inheritance\nWhat if a particular class in inheritance hierarchy is instanced and then its attribute (method or non method) is referenced? instancing a class is nothing more than bring a new instance object data structure which searches for attributes first in instance object data structure and then in its class object. Failing to get at either place, it starts 'class object' inheritance hierarchy to lookup again.\n<cb>\nclass B:\n def func(self):\n  print('B.func()')\nclass A(B):\n ca=10\n>>>a=A()\n>>>a.func()\nB.func\n</cb>\n<cb>\n                         +--------- class object B data structure\n                         |                           +----- instance object B()\n                         v                           |\n                     -----------       ---------- <--+\n                     |B.func() |       |        |\n                     -----------       ----------\n                            ^\nclass object A              |     \ndata structure          (3) ------ searchs upward  +------- instance object A()\n                                |                 |\n                                |                 v\n                    ----------- +  (2)   ----------    (1)\n            -------> |   ca    |<---------|        | <---------- a.func() \n                     -----------          ----------\n</cb>\nThere is no instance object inheritance hierarchy. <c>a=A()</c>, instantiating class A yeilds 'a'. Calling a.func() searches in instance object 'a' first then in class object 'A' and then in class object 'B'. It does not search in instance of class B.\n<cb>\nclass B:\n ca=10\n cb=20\n def __init__(self):\n  self.ma=40 # <l><--- self refer to instance object 'a'</l>\nclass A(B):         <l>when called in a.__init__ context</l>\n pass\n>>a=A()\n>>a.ma\n40\n</cb>\nThis happens because B.__init__ is called when A.__init__ is missing and so 'ma' attribute is added to the 'a' instance object.\n\n<h>\n*Polymorphism\n*Overriding methods\n</h>\nA class is polymorphic when its methods called against it would be different at compile and runtime. If method func() is called against instance of class A in the code then there would be provision to replace the instance of class at runtime making different func() method called altogether. This is also known as interface programming.\n<c>\nclass A:\n def func(self):\n  pass\n def __init__(self):\n  self.func()\n</c>\nIn code it is expected that self.func() is actually A().func. It shows polymorphics behaviour when self.func() inside A.__init__ would be different than A(). Here it shows polymporphic behaviour as code is written keeping in mind that func() method is called against class A instance, A().func(), where as method func() can be called against any class instance which actually have method func defined. This depends upon which 'self' is passed against A.__init__ as first argument. Typically these call would be from the derived classes. Drivie class method call finally resolves in inheritance heirarchy when it misses at the instance object. Method call typcially add instance object as first parameter in the argument list.\n\nUnlike c++, interface class need not delcare the function signature (as virtual). In this case the python class is pure virtual and methods must only be called aginst the concrete deriver classes.\n<c>\nclass A:\n def __init__(self):\n  self.func()\n</c>\nA.func() definition is not required when A need not be instantiated and it is considered as pure virtual class.\n\n<cb>          \n               +---- self is X() or A()\n               |\nclass A:       v\n def __init__(self):\n  self.func() <---- func() is polymorphic. \n                    Actual defintion depends on 'self' instance object\n\nclass X:\n def __init__(self):\n  A.__init__(self) # <-- any class instance can be passed\n def func(self):\n  print('X.func')\n\nclass D(A): # A.__init__ is called instead. 'self' is D instance object\n def func(self):\n  print('D.func')\n\n>>> x=X()\nX.func\n>>> d=D()\nD.func\n</cb>\n\nEvery method in class 'a' is virtual and all its attributes are public. Inheritance type is only public. Class attributes and instance attributes can be added at run time (instance attributes can be added only at runtime). Referring to instance attribute searches in instance object data structure and then in class objects in heirarchy.\nPython has no concept for instance object inheritance, Its only about class (object) inheritance. Method object is mere binding class function object against instance object and calling again the same class function object after prepending instnace object reference the argument's list.\nPython has no concept of implicit attribute binding to an object. while binding an attribute to an object (class or instance), object name must be mentioned explicitly.\nfailing to mention object name makes the attribute variable belong to local namespace.\n<c>\nclass A:\n def __init__(self):\n  ma=10\n</c>\nma is local variable to function A.__init__. it neither belong to class object A nor instance object A().\n<c>\nclass A:\n def __init__(self):\n  A.ca=10\n  self.ca=10\n</c>\none 'ca' goes to class object where as another one goes to instance object A().\nclass object attributes and instance object attributes can be added at runtime.\n<c>\nclass A:\n def __init__(self):\n  self.ma=10\n def func(self):\n  self.mb=20\n\nclass A(B):\n def __init__(self):\n  A.__init__(self)\n  self.mb=20\n</c>\n\na=A()\nb=B()\n\n'a' get two attributes ma and mb as B.__init__ argument 'self' is 'a' when it is called from A.__init__ --> B.__init__(self). 'b' get only one attribute 'ma'. similarly  class object can also be polymorphic\n\n<cb>\nclass B:\n def __init__(self,cls):\n  self.ma=10\n  cls.ca=10\n\nclass A(B):\n def __init__(self):\n  B.__init__(self,A)\n\n>>> a=A()\n>>> A.ca\n10\n>>> a.ca\n10\n>>> a.ma\n10\n</cb>\n\nso any class type value which can accept attributes at runtime are polymorphic.\nwhen methods are called against instance object in any class in class inheritance heirarcy search for method definition begins at instance object only and then takes path of class inheritance hierarchy.\n\n<cb>\nclass X:\n def __init__(self):\n  self.func()\n\nclass Y(X):\n def func():\n  print('Y.func')\n\nclass A(Y):\n pass\n\na=A()\n</cb>\n\n<cb>\n             ---------\n             |  X    |<-- class object X data structure\n             ---------\n               ^         +--------- class object B data structure\n               |         |\n               |(4)      v\n               |     -----------\n               +-----|B.func() |\n                     -----------\n                            ^\nclass object A              |\ndata structure          (3) ------ searchs upward  +------- instance object A()\n                                |                 |\n                                |                 v\n                    ----------- +  (2)   ----------    (1)\n            -------> |   ca    |<---------|        | <---------- a.func() \n                     -----------          ----------\n</cb>\n\nX.__init__ is called from meta class system which inturn calls X.__init__ as per inheritance. calling self.func() in X.__init__ leads to call of func method against the actual instance object which is 'a'. so search would be as follows\n\n<c>\nX.func\n  ^\n  |\nY.func\n  ^\n  |\nA.func <---- a.func\n</c>\n\nso finally it would call Y.func\n\n<h>\n*Multiple inheritance\n*super() function call\n</h>\nin multiple inheritance base classes are searched in depth first order where each class is search only once. this is also known a mro search algorithms\n<cb>\n              X\n             / \\\n              -\n              |\n      -----------------\n      |               |\n      B               C\n      .               .\n     / \\             / \\\n      -               -\n      |               |\n      +-------+-------+\n              |\n              A\n</cb>\n<c>\nclass B(X):\n pass\nclass C(X):\n pass\nclass A(B,C):\n pass\n</c>\n\nA.func(), order of search would be A.func, B.func, C.func and X.func.\nsuper is used to call base class function object. exact base class is decided by mro algorithms of python.\n\n<c>\nclass A(B,C):\n def __init__(self):\n  super(S,self).__func()\n'self' is class object or instance object. incase calling static method it can be called with class name in both parameter\nself(A,A)\n</c>\n\n<h>\n*Similarity and dissimilarity with C++\n</h>\n<d> Python is similar to c++ in\n <d2> Class object data structure - static attributes in c++ belongs to class object where as non static belongs to instance object\n <d2> Factory method is used to create instance object. <G>new</g> factory method creates instance object in c++ where as <G>object.__new</g> creates instance object in python\n\n<d> Dissimilarity\n <d2> Class object in c++ is created by compiler and there is no concept of meta class.\n <d2> Base class object data structure comes inside derive class data structure which means drive class object grows biggers with more number of base classes where base class object stays separate in python.\n <d2> Python also supports virtual and polymorphism. runtime attribute addition to object makes it polymorphic where as c++ maintains a vtable for each virtual method entry in class definition.\n <d2> Default attributes and inheritance in c++ is private where as it is public in python\n <d2> C++ has concept of pure virtual class that can not be instanciated. every class must declare a method when it access it in any method. every class can be instantiated and class my not define a method even if it is called against an object. object reference can be passed through arguments and that object class needs to have the defintion.\n <d2> Variable types must well defined and it cannot be changed in c++, every variable is polymorphic in python and it can change reference to any type of object at runtime."
'10!ABS SBA!Operator overloading!ABS SBA!<hr>\n*Raise exception\n</hr>\n<ho>\n*Catch in except block\n</ho>\n<ho>\n*Implement finally\n</ho>!ABS SBA!<h>\n*Exception objects\n</h>\n<h>\n*Assertion\n</h>\n<h>\n*try, except, finally\n</h>\n<h>\n*Raising an exception\n</h>\n<h>\n*User defined exceptions\n</h>'
'11!ABS SBA!Meta Class!ABS SBA!!ABS SBA!<h>\n*meta class\n</h>\nEvery value has a type so a meta class is type of all class values. It is same as class is type of class instance object. <i>type</i> is meta class of all classes. <G>type</g> is available as class and <G>type</g> is available as built in operator.\nwhen a class is of type \'type\' meta class, \'type\' meta class provides <i>factory method</i> __new__() which creates the class object. when instance object is of type class, class provides factory method __new__() which creates instance object.\n<d> A class definition follows two heirarchy\n <d2> <G>object</g> class inheritance where <i>object</i> is base class of all classes\n <d2> <G>meta class</g> inhertiance where <i>type</i> is base class of all meta classes\n<cb>\n           <g>object</g>        <g>type</g>\n             ^             ^\n             |             |\n             ----+     +----\n   <<base class>>|     |<<meta class>>\n                 |     |\n               ----------- equivalent to -------------------------\n               |    <g>A</g>    | <-----------> |A(object,metaclass=type|\n               -----------               -------------------------\n</cb>\n<G>type</G> meta class takes care of class object creation, through factory method __new__, and initialization, through __init__ method, whereas <G>object</G> takes care of class instance object creation, through factory method __new__, and initialization, through __init__ method. By default a class is derivied from <G>object</g> class where as its default meta class is <G>type</g>. So a class is of type <G>type</g>\n<G>meta class</g> has four functions, three responsible for class object creation (and initialization) whereas one hooks into instance object creation (and initialization) by <G>object</g> class.\n\n<cb>\n    ----------\n    |  <G>type</g> |\n    ---------------\n    |<g>@classmethod</g>|\n    |__prepare__  | <l><-- class namespace creation</l>\n    |<g>@staticmethod</g>| \n    |__new__      | <l><-- factory method class object creation</l>\n    |__init__     | <l><-- class object initialization</l>\n    +-------------+\n    |__call__     | ----+\n    --------------+     |\n                        | <l> instance object creation </l>\n                        v\n                  ----------\n                  | <g>object</g> |\n                  ----------\n                  |<g>@staticmethod</g> |\n                  |__new__   | <l><--- factory method instance object creation </l>\n                  |__init__  | <l><--- instance object initialization </l>\n                  ------------\n</cb>\n<cb>\n>>> class A:\n...  pass\n... \n>>> issubclass(A,object)\nTrue\n>>> issubclass(A,type)\nFalse\n>>> dir(A)\n[\'__class__\', \'__delattr__\', \'__dict__\', \'__dir__\', \'__doc__\', \'__eq__\', \'__format__\', \'__ge__\', \'__getattribute__\', \'__gt__\', \'__hash__\', \'__init__\', \'__init_subclass__\', \'__le__\', \'__lt__\', \'__module__\', \'__ne__\', \'__new__\', \'__reduce__\', \'__reduce_ex__\', \'__repr__\', \'__setattr__\', \'__sizeof__\', \'__str__\', \'__subclasshook__\', \'__weakref__\']\n>>> A.__class__\n<class \'type\'>\n>>> type(A)\n<class \'type\'>\n</cb>\n\n<h>\n*class object\n - creation\n - initialization\n</h>\n<d> A class object can be created in two fashion\n  <d2> Class definition where metaclass is assigned\n<c>\n   class A(B) # defaults to metaclass \'type\'\n   or\n   class A(B,metaclass=Meta) # \'Meta\' derived from \'type\'\n</c>\n Here class object for class definition \'A\' would be created. Base class object is \'B\' and meta class is \'Meta\'.\n  <d2> Through built in <i>type</i> function\n<c>\n  A=type(\'A\',(B,),{})\n  A=Meta(\'A\',(B,),{})   # \'Meta\' a \'type\' derivative\n</c>\n<cb>\n               --------------\n               |<g>type</g> |\n               +-------------+                         +--------+\n               |@classmethod |                         |        |\n               |__prepare__  |(metacls,clsname,bases) -> dict   |\n                                                                |\n                                                      +---------+\n                                                      |namespace\n               |@staticmethod|                        v\n               |__new__      |(metacls,clsname,bases,dct,**kw) -> clsobj\n               |__init__     |(clsobj) -> None                       |\n               ---------------   ^                                   |\n                      ^          |                                   |\n                      |          +-----------------------------------+\n                      +------------------\n                                        |\n ---------------------------  metaclass |\n |class A(B,metaclass=type)| -----------+\n | pass                    |            |\n ---------------------------            |\n        or                              |\n ------------------------               |\n |A=type(\'A\',(B,),{}) | ----------------+\n ------------------------\n</cb>\n\nPython creates class object either from class definition or invocation of \'type\' inbuilt function. \n<d> Class object from class definition\n <d2> Python first calls type.__prepare__ classmethod to get the namespace for class object. type.__preapre__ returns dictionary or its derivative.\n <d2> Factory method type.__new__ is called with metaclass,class name,class bases and __prepare__ returned custom dictionary argumetns. __new__ return class object.\n <d2> <G>type.__init__</g> is called with classobject retruned from type.__new__ method. type.__init__ further intialize the class object. it return None.\n<d> Runtime class object creation through <i>type</i> built-in function\n <d2> \'type\' built in function is called with classname,bases,custom dictinary object carrying attributes.\n\n<c>\nclass mydict(dict):\n def __init__(self,**kw):\n  self.mykey=list(kw.keys())\n  super(mydict,self).__init__(kw)\n def __setitem__(self,key,value):\n  if key not in self:\n   self.mykey.append(key)\n  dict.__setitem__(self,key,value)\n\nclass Meta(type):\n @classmethod\n def __prepare__(metacls,name,bases):\n  return mydict(ma=10,mb=\'hello\')\n @staticmethod\n def __new__(*a,**kw):\n  return super(Meta,Meta).__new__(*a,**kw)\n def __init__(cls,*a,**kw):\n  super(Meta,cls).__init__(*a,**kw)\n\nclass B:\n pass\n</c>\n\n<d> Two types of class object creation\n <d2> Class definition\n<c>\n>>> class A(B,metaclass=Meta):\n...  ca=\'world\'\n... \n>>> dir(A)\n[\'__class__\', \'__delattr__\', \'__dict__\', \'__dir__\', \'__doc__\', \'__eq__\', \'__format__\', \'__ge__\', \'__getattribute__\', \'__gt__\', \'__hash__\', \'__init__\', \'__init_subclass__\', \'__le__\', \'__lt__\', \'__module__\', \'__ne__\', \'__new__\', \'__reduce__\', \'__reduce_ex__\', \'__repr__\', \'__setattr__\', \'__sizeof__\', \'__str__\', \'__subclasshook__\', \'__weakref__\', \'ca\', \'ma\', \'mb\']\n</c>\n <d2> <G>type</g> built in function\n<c>\n>>> A=Meta(\'A\',(B,),mydict(ma=10,mb=\'hello\',ca=\'world\'))\n>>> dir(A)\n[\'__class__\', \'__delattr__\', \'__dict__\', \'__dir__\', \'__doc__\', \'__eq__\', \'__format__\', \'__ge__\', \'__getattribute__\', \'__gt__\', \'__hash__\', \'__init__\', \'__init_subclass__\', \'__le__\', \'__lt__\', \'__module__\', \'__ne__\', \'__new__\', \'__reduce__\', \'__reduce_ex__\', \'__repr__\', \'__setattr__\', \'__sizeof__\', \'__str__\', \'__subclasshook__\', \'__weakref__\', \'ca\', \'ma\', \'mb\']\n</c>\n\n<h>\n*instance object\n - Creation\n - Initialization\n</h>\n<a>\n<b>Abstract:</b>when a class object is called with function operator \'()\', it generates instances of class namespace called class instances which is referred by data structure class instance object\n</a>\nA <g>class instance object</g> is a data structure which comes into picture when its prototype/blueprint <G>class object</G> gets called with function operator \'()\' which leads to <c><i>__call__</i></c> function invocation in \'type\' (or its derivative) meta class. Further the data structure gets instantiated through static factory method <c><i>object.__new__</i></c> in class object and newly created instance object data structure is then initialized through method <c><i>object.__init__</i></c> in class <G>object</G>. A class object, simply called class, is blueprint for class instance object which is simply called object.\n<cb>\n            ----------\n            | object |\n            ---------------\n            |@staticmethod|  (2)\n            |__new__      |<-------+(clsobj) -> instanceobj ---\n            |__init__     |<----+  |(instanceobj)             |\n            --------------- (3) |  |        ^                 |\n                 ^              +--+        |                 |\n                / \\             |           +-----------------+\n                 -              +------------+\n                 |                           |\n           ---------  metaclass +---------   | (1)\n           |class A|  ------>   | type   |   +-----+\n           ---------      ^     +--------+         |\n                ^         |     |__call__|(cls)----+ \n                |         |     ---------- (A)\n                |         |\n                |a=A() or a=type(\'A\',(),{})()\n       ---------+\n       |        |<<instantiation>>\n   ------    ------\n   | a  |    |  b |\n   ------    ------\n</cb>\npseudo code for type.__call__ can be considered as\n<c>\nclass type:\ndef __call__(clsobj,*a,**kw):\n instanceobj=clsobj.__new__(clsobj,*a,**kw)\n instanceobj.__init__(*a,**kw)\n</c>\n<d> <G>class intantiated object</G> is created with following steps\n <d2> Function operator against class name appears\n<c>\nclass Meta(type):\n def __call__(clsobj,*a,**kw):\n  print(\'>< Meta.__call__\',clsobj,a,kw)\n  return super(Meta,clsobj).__call__(*a,**kw)\n\nclass B:\n pass\n\nclass A(B,metaclass=Meta):\n @staticmethod\n def __new__(clsobj,*a,**kw):\n  print(\'>< A.__new__\',clsobj,a,kw)\n  return super(A,A).__new__(clsobj,*a,**kw)\n def __init__(self,*a,**kw):\n  print(\'>< A.__init__\',self,a,kw)\n  super(A,self).__init__(*a,**kw)\n\na=A() # <----- function operator\n</c>\n\n<cb>\n>< Meta.__call__ <class \'__main__.A\'> () {}\n>< A.__new__ <class \'__main__.A\'> () {}\n>< A.__init__ <__main__.A object at 0x7faf79091460> () {}\n</cb>\n\n <d2> When <G>type</G> inbuilt function creates class object and function operator called against it\n<c>\n a=<g>type</g>(\'A\',(),{})() # <----- function operator\n</c>\n\n<h>\n*Modify class in meta class\n</h>\n<i>type.__new__</i> creates the class object. arguments in creating class object includes base class list and attributes dictionary. base class list or/and <G>dict</g> can be modified to get different class all together.\n<c>\nclass Meta(type):\n @staticmethod\n def __new__(metacls,clsname,bases,dct,**kw):\n  upperdct=dict()\n  for key in dct:\n   if not key.startswith(\'__\'):\n    upperdct[key.upper()]=dct[key]\n   else:\n    upperdct[key]=dct[key]\n  print(\'non-modified dct {} \\nmodified dct {}\'.format(dct,upperdct))\n  return super(Meta,Meta).__new__(metacls,clsname,bases,upperdct,**kw)\n\nclass A(metaclass=Meta):\n ca=10\n cb=\'hello world\'\n</c>\n\n<cb>\nnon-modified dct {\'__module__\': \'__main__\', \'__qualname__\': \'A\', \'ca\': 10, \'cb\': \'hello world\'} \nmodified dct {\'__module__\': \'__main__\', \'__qualname__\': \'A\', \'CA\': 10, \'CB\': \'hello world\'}\n>>> A.CA\n10\n>>> A.CB\n\'hello world\'\n>>> A.__dict__\nmappingproxy({\'__module__\': \'__main__\', \'CA\': 10, \'CB\': \'hello world\', \'__dict__\': <attribute \'__dict__\' of \'A\' objects>, \'__weakref__\': <attribute \'__weakref__\' of \'A\' objects>, \'__doc__\': None})\n>>> dir(A)\n[\'CA\', \'CB\', \'__class__\', \'__delattr__\', \'__dict__\', \'__dir__\', \'__doc__\', \'__eq__\', \'__format__\', \'__ge__\', \'__getattribute__\', \'__gt__\', \'__hash__\', \'__init__\', \'__init_subclass__\', \'__le__\', \'__lt__\', \'__module__\', \'__ne__\', \'__new__\', \'__reduce__\', \'__reduce_ex__\', \'__repr__\', \'__setattr__\', \'__sizeof__\', \'__str__\', \'__subclasshook__\', \'__weakref__\']\n>>> A.ca\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nAttributeError: type object \'A\' has no attribute \'ca\'\n</cb>\n\n<h>\n*Inheritance\n*Singleton\n</h>\nwhen a class is derives from another class,i.e A drives from B, metaclass of A also must be same or derivative of metaclass of B. by default meta class of class is \'type\'. if B\'s meta class is not defined then A\'s metaclass must be \'type\' or derivative of type.\n\n<c>\nclass Meta(type):\n pass\n\nclass B(metaclass=Meta):\n pass\n\nclass A(B,metaclass=Meta):\n pass\n\nclass A(B,metaclass=MetaA):\n pass\n</c>\nhere class A metaclass must be Meta or derivative of Meta.\n<c>\nclass MetaA(Meta):\n pass\n</c>\nmeta class can be used to create singleton class. singleton class can be instantiated only once. instantiating more time would return same (firstly created) instance object reference. instance object is created with function operator against class.\n<c>\na=A()\n</c>\ncreates instance object \'a\' when class A is called function operator \'()\'. in this case type.__call__ function is called which in turn class \'object.__new__\' and \'object.__init__\' to created the instance object and then initialize them.\ntype.__call__ operator can be overloaded and calling type.__new__ and type.__init__ can be barred from second time onwards returning first time created instance object.\n\n<c>\nclass Meta(type):\n def __call__(clsobj,*a,**kw):\n  if not hasattr(Meta.__call__,\'singleton\'):\n   setattr(Meta.__call__,\'singleton\',super(Meta,clsobj).__call__(*a,**kw))\n  return getattr(Meta.__call__,\'singleton\')\n</c>\n\n<cb>\n>>> a=A()\n>>> b=A()\n>>> c=A()\n>>> id(a)\n140452269326048\n>>> id(b)\n140452269326048\n>>> id(c)\n140452269326048\n>>> a is b\nTrue\n>>> a is c\nTrue\n</cb>\n\nclass attribute Meta.singleton can also be used\ninstead of class function object attribute Meta.__call__\n\n<c>\nclass Meta(type):\n singleton=None\n def __call__(clsobj,*a,**kw):\n  if not Meta.singleton:\n   Meta.singleton=super(Meta,clsobj).__call__(*a,**kw)\n  return Meta.singleton\n</c>\n\nit can also be achieved by barring call to object.__new__ when overriden <class>.__new__ is called from type.__call__. this approach tough does not support barring call to object.__init__ which leads to modification of instance attributes.\n<c>\nclass A:\n def __new__(clsobj,*a,**kw):\n  if not hasattr(A.__new__,\'singleton\'):\n   setattr(A.__new__,\'singleton\',super(A,clsobj).__new__(*a,**kw))\n  return getattr(A.__new__,\'singleton\')\n\n</c>\nthis does not stop modifying the instance in A.__init__ function\n<c>\nclass A:\n  def __init__(self,*a,**kw):\n   self.ma=random.randrange(0,20,1)\n</c>\n\n<d> Example - A singleton widget is created with QWidget from PySide6. creating three widget would create only one.\n\n<c>\nfrom PySide6 import QtWidgets\nimport random\n\nclass Meta(type(QtWidgets.QWidget)):\n def __call__(clsobj,*a,**kw):\n  if not hasattr(Meta.__call__,\'singleton\'):\n   setattr(Meta.__call__,\'singleton\',super(Meta,clsobj).__call__(*a,**kw))\n  return getattr(Meta.__call__,\'singleton\')\n\nclass widget(QtWidgets.QWidget,metaclass=Meta):\n#class widget(QtWidgets.QWidget):\n COLOR=[\'#ffff01\',\'#ff0d01\',\'#ffa303\',\'#ff00fe\',\'#6700cd\',\'#0140ff\',\'#00bff3\',\'#01b787\',\'#abe409\']\n def __init__(self,*a,**kw):\n  super(widget,self).__init__(*a,**kw)\n  self.setStyleSheet(\'background-color:\'+widget.COLOR[random.randrange(0,len(widget.COLOR))]+\';\')\n\nif __name__==\'__main__\':\n app=QtWidgets.QApplication()\n w=widget()\n w2=widget()\n w3=widget()\n w.setWindowTitle(str(hex(id(w))));\n w2.setWindowTitle(str(hex(id(w2))));\n w3.setWindowTitle(str(hex(id(w3))));\n print(\'id(w) {}, id(w2) {}, id(w3) {}\'.format(hex(id(w)),hex(id(w2)),hex(id(w3))))\n w.show();w2.show();w3.show()\n app.exec_()\n</c>\n\n<m>http://minhinc.42web.io/image/singleton_s.png</m>\nsingleton widget class, only one window\n\n<m>http://minhinc.42web.io/image/singleton3_s.png</m>\nwithout singleton, three window'
'12!ABS SBA!Exception!ABS SBA!<ho>\n*Raise exception\n</ho>\n<ho>\n*Catch in except block\n</ho>\n<ho>\n*Implement finally\n</ho>!ABS SBA!<h>\n*Exception objects\n</h>\n<h>\n*Assertion\n</h>\n<h>\n*try, except, finally\n</h>\n<h>\n*Raising an exception\n</h>\n<h>\n*User defined exceptions\n</h>'
'13!ABS SBA!File I/O!ABS SBA!<hr>\n*Implement operator overloading methods\n</hr>!ABS SBA!<h>\n*Introduct operator overloading\n</h>\n<h>\n*__init__, __del__\n*__sub__\n*__add_\n*__or__\n</h>\n<h>\n*__repr__,__str__\n*__getattr_,__getattribute__,__setattr__,__delattr__\n*__getitem__,__setitem__,__delitem__\n*__len__,__bool__\n*__lt__,__gt__,__le__,__ge__,__eq__,__ne__\n</h>\n<h>\n*__radd__,__iadd__,__iter__,__next__\n*__contains__\n*__index__\n*__enter__,__exit__\n</h>\n<h>\n*__get__,__set__\n*__delete__\n*__new__\n</h>'
'14!ABS SBA!Python execution model!ABS SBA!!ABS SBA!<h>\n*Self-Organizing Maps\n</h>\n<h>\n*Boltzmann Machine\n</h>\n<h>\n*Auto Encoders\n</h>'
'15!ABS SBA!Regular Expression!ABS SBA!<ho>\n*Write regular expression to search and\nmodify a string.\n</ho>!ABS SBA!<h>\n*Module re\n</h>\n<h>\n*match(), search(), sub()\n</h>\n<h>\n*Modifiers\n</h>'
'16!ABS SBA!Basic Operators!ABS SBA!!ABS SBA!<h>\n*Arithmetic operator\n</h>\n<h>\n*Relation operator\n</h>\n<h>\n*Assignment operator\n</h>\n<h>\n*Bitwise operator\n</h>\n<h>\n*Membership operator\n</h>\n<h>\n*Identity operator\n</h>'
'17!ABS SBA!Python for Data Science!ABS SBA!<ho>\n*Download and install Python SciPy\n</ho>\n<ho>\n*Load a dataset \n</ho>\n<ho>\n*Create machine learning models\n</ho>!ABS SBA!None'
'31!ABS SBA!title!ABS SBA!None!ABS SBA!Python Essentials Training'
'32!ABS SBA!subtitle!ABS SBA!None!ABS SBA!5-day session'
'33!ABS SBA!h_Overview!ABS SBA!None!ABS SBA!Understanding principles of Object Oriented Programming\nUnderstanding the structure of a Python program\nUnderstanding module, class and object\nUnderstanding Polymorphism and Inheritance\nPractical labs with Python 3.x Interprete'
'34!ABS SBA!h_Duration!ABS SBA!None!ABS SBA!Five days - 40 hours (8 hours a day)\n50% of lecture, 50% of practical labs.'
'35!ABS SBA!h_hr!ABS SBA!None!ABS SBA!None'
'36!ABS SBA!h_Trainer!ABS SBA!None!ABS SBA!<m>http://www.linkedin.com/in/pravinkumarsinha</m>'
'37!ABS SBA!h_Audience!ABS SBA!None!ABS SBA!Professional embedded Software developers\nEmbedded developers.\nPeople supporting large scale products.'
'38!ABS SBA!h_Prerequisite!ABS SBA!None!ABS SBA!<b>Knowledge of Shell Scripting programming</b>\nIn particular, participants should be familiar with writing scripts in Unix\nShell Programming. Basic syntax and execution flow knowledge is required.\nShell Programming training agenda is available at\n<m>http://minhinc.42web.io/training/li/advance-li-agenda.php</m>\n\nand can be downloaded from\n<m>http://minhinc.42web.io/training/advance-li-agenda.pdf</m>\n\n<b>Knowledge of Object Oriented Concepts</b>\nOops concept like Abstraction, Inheritance, Polymorphism would help.'
'39!ABS SBA!h_hr!ABS SBA!None!ABS SBA!None'
'40!ABS SBA!h_Setup!ABS SBA!None!ABS SBA!Machine with Python 3.x interpreter installed.'
'41!ABS SBA!h2_Lecture!ABS SBA!None!ABS SBA!Lecture session will be course content presentation through the trainer.\nAny source code example related to the topic will be demonstrated, it would\ninclude executing the binaries.\nComplete lecture material can be downloaded from\n<m>http://minhinc.42web.io/training/advance-py-slides.pdf</m>'
'42!ABS SBA!h2_Labs!ABS SBA!None!ABS SBA!Labs session would be completely hands on session where each example\n(with example data and execution instruction) would be provided to the\nstudents. Students can verify their results with the results provided in\nthe material.'
